{"version":3,"sources":["webpack:///./src/pages/iac-resources/compute/provisioners/index.mdx"],"names":["name","_frontmatter","PageDescription","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAEeA,EAFTC,EAAe,GAOtBC,GALgBF,EAKgB,kBALR,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,2EAC5B,kBAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,E,oIACF,mBACD,OAAO,YAACI,EAAD,KAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,YAACT,EAAD,CAAiBS,QAAQ,mBACvB,4EAEF,wJAAuI,mBAAGC,WAAW,KAAQ,CACzJ,KAAQ,gDAD2H,2BAAvI,qDAE0F,0BAAYA,WAAW,KAAvB,QAF1F,QAEmJ,0BAAYA,WAAW,KAAvB,eAFnJ,kFAGA,6CAA4B,0BAAYA,WAAW,KAAvB,aAA5B,yCAA2H,mBAAGA,WAAW,KAAQ,CAC7I,KAAQ,yDAD+G,oBAA3H,wEAEsG,mBAAGA,WAAW,KAAQ,CACxH,KAAQ,gEAD0F,2BAFtG,4BAIiE,mBAAGA,WAAW,KAAQ,CACnF,KAAQ,4CADqD,eAJjE,iCAOA,gEAA+C,0BAAYA,WAAW,KAAvB,oCAA/C,2BAAuJ,0BAAYA,WAAW,KAAvB,aAAvJ,eACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,kBACd,KAAQ,eAHP,qoBA2BL,2CAA0B,0BAAYA,WAAW,KAAvB,QAA1B,0FAAqK,0BAAYA,WAAW,KAAvB,eAArK,qCAAkQ,0BAAYA,WAAW,KAAvB,cAAlQ,2JACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,6GAIL,8DAA6C,0BAAYA,WAAW,KAAvB,gBAA7C,mBACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gCAIL,qBAAG,kBAAIA,WAAW,KAAf,gBAQPH,EAAWI,gBAAiB","file":"component---src-pages-iac-resources-compute-provisioners-index-mdx-e42c48d1f796da2610ad.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/johandry/Workspace/ibm/att-cloudnative/ibmcloud-pattern-guide/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`Use of Terraform Provisioners instead of user_data`}</p>\n    </PageDescription>\n    <p>{`The compute guide pattern uses a Terraform code to do the configuration of the VSI, this configuration is discouraged - even by `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.terraform.io/docs/provisioners/\"\n      }}>{`Terraform documentation`}</a>{` - to be done with Terraform Provisioners such as `}<inlineCode parentName=\"p\">{`file`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`remote_exec`}</inlineCode>{`. However, this page will explain how to so it, if you still want to use them.`}</p>\n    <p>{`Instead of using the `}<inlineCode parentName=\"p\">{`user_data`}</inlineCode>{` attribute, you can use the Terraform `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.terraform.io/docs/provisioners/file.html\"\n      }}>{`file provisioner`}</a>{` to deploy the JSON file to the provisioned VSI, and you can use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.terraform.io/docs/provisioners/remote-exec.html\"\n      }}>{`remote-exec Provisioner`}</a>{` to installs Node.js and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/typicode/json-server\"\n      }}>{`json-server`}</a>{`, before to start the server.`}</p>\n    <p>{`That code would be like this inside the `}<inlineCode parentName=\"p\">{`ibm_is_instance.iac_app_instance`}</inlineCode>{` resource replacing the `}<inlineCode parentName=\"p\">{`user_data`}</inlineCode>{` attribute.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\",\n        \"metastring\": \"path=compute.tf\",\n        \"path\": \"compute.tf\"\n      }}>{`resource \"ibm_is_instance\" \"iac_app_instance\" {\n  ...\n  provisioner \"file\" {\n    source      = \"db.min.json\"\n    destination = \"/home/ubuntu/db.min.json\"\n    connection {\n      user        = \"ubuntu\"\n      private_key = var.private_key\n      host        = ibm_is_floating_ip.iac_app_floating_ip.address\n    }\n  }\n\n  provisioner \"remote-exec\" {\n    inline = [\n      \"curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -\",\n      \"sudo apt-get install -y nodejs\",\n      \"sudo npm install -g json-server\",\n      \"json-server --watch /home/ubuntu/db.min.json --port \\${var.port} --host 0.0.0.0\"\n    ]\n  }\n  ...\n}\n`}</code></pre>\n    <p>{`As you can see the `}<inlineCode parentName=\"p\">{`file`}</inlineCode>{` provisioner needs the private key to make a connection to the server, so the variable `}<inlineCode parentName=\"p\">{`private_key`}</inlineCode>{` is required in a similar way the `}<inlineCode parentName=\"p\">{`public_key`}</inlineCode>{` was stored. As the private key contain new lines and Terraform requires one line to assign the value to the variable, letâ€™s use the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`echo -n \"private_key = \\\\\"$(awk -v ORS='\\\\\\\\\\\\\\\\n' '1' ~/.ssh/id_rsa)\\\\\"\\\\n\" >> secret.auto.tfvars\n`}</code></pre>\n    <p>{`The variable has to be defined in the `}<inlineCode parentName=\"p\">{`variables.tf`}</inlineCode>{` file, like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-hcl\"\n      }}>{`variable \"private_key\" {}\n`}</code></pre>\n    <p><em parentName=\"p\">{`INCOMPLETE`}</em></p>\n    {\n      /* TODO: Finish this page, there is a cycle error at ibm_is_floating_ip.iac_app_floating_ip.address  */\n    }\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}