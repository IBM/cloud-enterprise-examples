{"componentChunkName":"component---src-pages-ci-cd-cloud-native-ci-tools-index-mdx","path":"/ci-cd/cloud-native-ci-tools/","result":{"pageContext":{"frontmatter":{"title":"Continuous Integration with Jenkins"},"relativePagePath":"/ci-cd/cloud-native-ci-tools/index.mdx","titleType":"page","MdxNode":{"id":"c217df13-a258-5e69-9395-befcb022bc8b","children":[],"parent":"54b5fc59-2db7-55ba-a39a-043776fc9ae8","internal":{"content":"---\ntitle: Continuous Integration with Jenkins\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nUse Jenkins to automate your continuous integration process\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink to=\"#what-is-jekins\">What is Jenkins</AnchorLink>\n  <AnchorLink to=\"#what-is-tekton\">What is Tekton</AnchorLink>\n</AnchorLinks>\n\nIn IBM Garage Method, one of the Develop practices is [continuous integration](https://www.ibm.com/garage/method/practices/code/practice_continuous_integration/). The <Globals name=\"env\" /> uses a Jenkins pipeline to automate continuous integration.\n\n## What is continuous integration\n\nContinuous integration is a software development technique where software is built regularly by a team in an automated fashion.\nThis quote helps explain it:\n\n> Continuous Integration is a software development practice where members of a team integrate their work frequently,\n> usually each person integrates at least daily - leading to multiple integrations per day.\n> Each integration is verified by an automated build (including test) to\n> detect integration errors as quickly as possible. Many teams find that this approach leads to significantly\n> reduced integration problems and allows a team to develop cohesive software more rapidly\n> <cite>– Martin Fowler</cite>\n\n## What is Jenkins\n\n[Jenkins](https://jenkins.io/) is a self-contained, open source automation server that can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software.\nIt is a perfect tool for helping manage continuous integration tasks for a wide range of software components.\n\nJenkins Pipeline (or simply \"Pipeline\") is a suite of plugins that supports implementing and integrating continuous delivery pipelines into Jenkins.\n\nA continuous delivery pipeline is an automated expression of your process for getting software from version control right through to your users and customers.\n\nJenkins Pipeline provides an extensible set of tools for modeling simple-to-complex delivery pipelines \"as code.\" The definition of a Jenkins Pipeline is typically written into a text file (called a [Jenkinsfile](https://jenkins.io/doc/pipeline/tour/hello-world/)) that in turn is checked into a project’s source control repository.\n\n### Pipelines\n\nPipelines offer a set of stages or steps that can be chained together to allow a level of software\nautomation. This automation can be tailored to the specific project requirements.\n\nYou can read more information about Jenkins Pipelines [here](https://jenkins.io/doc/book/pipeline/)\n\n### Stages\n\nPipelines are defined in a `Jenkinsfile` that sits in the root of your application code. It defines a number of stages. Each of the [<Globals name=\"templates\" />](/codepatterns/overview) includes a `Jenkinsfile` that offers a number of stages. The stages have been configured to complete the build, test, package, and deploy of the application code. Each stage can use the defined defined `secrets` and `config maps` that were previously configured during the installation of Development cluster setup.\n\n## Developer Tools Pipeline\n\nTo enable application compatibility between Kubernetes and OpenShift, the `Jenkinsfile` is consistent between pipeline registration with\nboth platforms. Also, the Docker images are built from\n[UBI images](https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image)\nso that their containers can run on both platforms.\n\nThese are the stages in the pipeline and a description of what each stage does. The **bold stage names** indicate\nthe stages that are required; the ***italics stage names*** indicate optional stages that can be deleted or will be ignored if the tool\nsupporting the stage is not installed. These stages represent a typical production pipeline flow for a cloud-native application.\n- **Setup**: Clones the code into the pipeline\n- **Build**: Runs the build commands for the code\n- **Test**:\tValidates the unit tests for the code\n- ***Publish pacts***:\tPublishes any pact contracts that have been defined\n- ***Sonar scan***: Runs a sonar code scan of the source code and publishes the results to SonarQube\n- **Verify environment**: Validates the OpenShift or IKS environment configuration is valid\n- **Build image**: Builds the code into a Docker images and stores it in the IBM Cloud Image registry\n- **Deploy to DEV env**:\tDeploys the Docker image tagged version to `dev` namespace using Helm Chart\n- **Health Check**: Validates the Health Endpoint of the deployed application\n- ***Package Helm Chart***: Stores the tagged version of the Helm chart in Artifactory\n- ***Trigger CD Pipeline***: This is a GitOps stage that will update the build number in designated git repo and trigger ArgoCD for deployment to **test**\n\n## Registering Pipelines\n\n- The [<Globals name=\"templates\" />](/ci-cd/cloud-native-codepatterns) are a good place to start to see how `Jenkinsfile` and `Dockerfile` should be configured for use in a Jenkins CI pipeline. To register your git repo, use the CLI. This command automates a number of manual steps you would have to do with Jenkins, including: managing secrets, webhooks, and pipeline registration in the Jenkins tools.\n    ```bash\n    kubectl pipeline\n    ```\n\n- By default, the pipeline will register into the current namespace and will copy all the `configMaps` and `secrets` from the `tools` namespace to this namespace. This means the pipeline can execute, knowing it has access to the key information that enables it to integrate with both the cloud platform and the various development tools.\n\n### Registering Pipeline in new namespace\n\n- You can use any namespace you want to register a pipeline. Using the `kubcectl sync` command it will created you a new namespace for your team. It will copy the necessary `secrets` and `configMaps` into that namespace and configure the build agents pods to run in that namespace.\n    ```bash\n    kubectl sync dev-team-one --jenkins\n    ```\n- You can structure multi teams squads, teams, pairs or students working in the same Development cluster given them their own namespace to work in for CI activities.\n\n- Create a template app and clone it to your Cloud Shell environment\n- Then register the code with the Jenkins environment using the following command\n    ```bash\n    kubectl pipeline\n    ```\n- You will be prompted for you Git Hub Personal Access token\n\n## Continuous deployment\n\nIn addition to continuous integration, the <Globals name=\"env\" /> also supports continuous delivery\nusing Artifactory and ArgoCD you can read up on how to use this in :\n\n\n## What is Tekton\n\nTekton is a new emerging CI tool that has been built to support Kubernetes and OpenShift from the ground up.\n\n[Tekton](https://tekton.dev/) is a powerful yet flexible Kubernetes-native open-source framework for creating continuous integration and delivery (CI/CD) systems. It lets you build, test, and deploy across multiple cloud providers or on-premises systems by abstracting away the underlying implementation details.\n\n### Tekton 101\n\n<iframe width=\"80%\" height=\"315\" src=\"https://www.youtube.com/embed/TWxKD9dLpmk\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\nTekton provides open-source components to help you standardize your CI/CD tooling and processes across vendors, languages, and deployment environments. Industry specifications around pipelines, releases, workflows, and other CI/CD components available with Tekton will work well with existing CI/CD tools such as Jenkins, Jenkins X, Skaffold, and Knative, among others.\n\n- Read the this this [Overview of Tekton](/guides/continuous-integration-tekton-crc#what-is-tekton)\n\n- For more information read up about it [Tekton Tutorial](https://developer.ibm.com/tutorials/knative-build-app-development-with-tekton/)\n\n- For more information read up about it [App Build Tutorial with Tekton](https://developer.ibm.com/tutorials/knative-build-app-development-with-tekton/)\n\nThe IBM Cloud is standardizing on using Tekton in both IBM Cloud DevOps\n service and IBM Cloud Pak for Applications. OpenShift 4.2 will also natively\n  support it.\n\nThis guide will focus on using Tekton when the Development tools have been\n installed in Redhat OpenShift, IBM Kubernetes Managed services and **Red Hat\n  Code Ready Containers** to give you choice for you Continuous Integration\n   cloud native development toolset.\n\n<InlineNotification>\n\n**Note:** This guide will help you set up the [<Globals name=\"templates\" />](/codepatterns/overview) with  **Tekton** and requires that you have installed Tekton with **Red Hat Code Ready Containers 4.2** or have installed open source Tekton into the The IBM Kubernetes Cluster.\n\n</InlineNotification>\n\n### Common App Tasks\n\nThe following gives a description of each `Task` that is commonly used in a\n `Pipeline`. The *Optional* stages can be deleted or ignored if the tool support it is not installed. These stages represent a typical production pipeline flow for a Cloud Native application.\n\n- **Setup** clones the code into the pipeline\n- **Build** runs the build commands for the code\n- **Test**\tvalidates the unit tests for the code\n- **Publish pacts**\t(*optional*) publishes any pact contracts that have been defined\n- **Verify pact** (*optional*) verifies the pact contracts\n- **Sonar scan** (*optional*) runs a sonar code scan of the source code and publishes the results to SonarQube\n- **Build image** Builds the code into a Docker images and stores it in the IBM Cloud Image registry\n- **Deploy to DEV env**\tDeploys the Docker image tagged version to `dev` namespace using Helm Chart\n- **Health Check** Validates the Health Endpoint of the deployed application\n- **Package Helm Chart** (*optional*) Stores the tagged version of the Helm chart into Artifactory\n- **Trigger CD Pipeline** (*optional*) This is a GitOps stage that will\n update the build number in designated git repo and trigger ArgoCD for\n  deployment to **test** namespace\n\n### Install Tekton\n\nTekton can be installed in both RedHat Openshift and IBM Kubernetes manage\n service and RedHat Code Ready Containers. To install the necessary\n  components follow the steps below.\n\n- Install [IBM Garage for Cloud Developer Tools](/admin/overview) on your\n managed OpenShift,CRC or IKS development cluster on the IBM Cloud. This will\n  help configure the tools and `secrets` and `configMap` to make working with\n   IBM Cloud so much easier.\n\n<Tabs>\n\n<Tab label=\"OpenShift 3.11\">\n\n### IBM Cloud Pak for Applications 3.0.1\n\n- Install Tekton on OpenShift 3.11\n    - Install [IBM Cloud Paks for Applications 3.0.1](https://cloud.ibm.com/catalog/content/ibm-cp-applications) on the OpenShift Cluster from the\n     IBM Cloud Catalog Software tab\n\n</Tab>\n\n<Tab label=\"OpenShift 4.x\">\n\n### Install on OpenShift 4.x\n\n- If you have installed the IBM Garage for Cloud Developer Tools into your\n cluster this will automatically install the operator for you.\n\n- Install Tekton on OpenShift 4 including CodeReady Containers (CRC)\n    - Install via operator hub Administrator perspective view, click\n     **Operator Hub** search for `OpenShift Pipelines` and install operator\n\n</Tab>\n\n<Tab label=\"Kubernetes\">\n\n### Install Tekton on IBM Kubernetes Managed Service\n- Install Tekton via Knative add-on (can be found in the **Add On** tab in\n the Kubernetes managed service dashboard)\n, it includes\n Tekton support by default and the Webhook extension.\n- Install [Tekton Dashboard](https://github.com/tektoncd/dashboard#install-dashboard) follow the instructions in the `README.md`\n- Add Ingress endpoint for the **Tekton Dashboard** add a host name that uses\n the IKS cluster subdomain\n    ```yaml\n      apiVersion: extensions/v1beta1\n      kind: Ingress\n      metadata:\n        name: tekton-dashboard\n        namespace: tekton-pipelines\n      spec:\n        rules:\n        - host: tekton-dashboard.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud\n          http:\n            paths:\n            - backend:\n                serviceName: tekton-dashboard\n                servicePort: 9097\n    ```\n- Install [Tekton Webhook Extension](https://github.com/tektoncd/experimental/tree/master/webhooks-extension#install-webhook-extension)\n\n</Tab>\n\n</Tabs>\n\n### Setup Tekton\n\n- Install Tekton pipelines and tasks into the `dev` namespace following the\n instructions in the repository [ibm-garage-tekton-tasks](https://github.com/ibm-garage-cloud/ibm-garage-tekton-tasks/blob/master/README.md)\n- Install the `Tasks`\n    ```bash\n    kubectl create -f ibm-garage-tekton-tasks/tasks/ -n dev\n    ```\n- Install the `Pipelines`\n    ```bash\n    kubectl create -f ibm-garage-tekton-tasks/pipelines/ -n dev\n    ```\n\n### Configure namespace for development\n\n- Install the Tekton CLI `tkn` https://github.com/tektoncd/cli\n\n- Create a new namespace (ie `dev-{initials}`) and copy all config and secrets\n  ```\n  igc namespace -n {new-namespace}\n  ```\n- Set your `new-namespace` the current namespace context\n  ```\n  oc project {new-namespace}\n  ```\n\n- The template `Pipelines` provided support for `Java` or `Node.js` based apps. You can configure your own custom `Tasks` for other runtimes. There are a number of default `Tasks` to get you started they are detailed above. To create an application use one of the provided [<Globals name=\"templates\" />](/codepatterns/overview) these templates work seamlessly with the `Tasks` and `Pipelines` provided.\n\n### Register the App with Tekton\n\nWith Tetkon enabled and your default `Tasks` and `Pipelines` installed into\n the `dev` namespace. You can now configure your applications to be built, packaged, tested and deployed to your OpenShift or Kubernetes development cluster.\n\n- Connect to the pipeline. (See the [IGC CLI](/getting-started/cli) for details about how the `pipeline` command works.)\n\n    ```bash\n    igc pipeline -n dev-{initials} --tekton\n    ```\n\n### Verify the pipeline\n\nTo validate your pipeline have been correctly configured, and has triggered a\n `PipelineRun`\n use the following **Tekton** dashboards or `tkn` CLI to validate it ran\n  correctly without errors.\n\n<Tabs>\n<Tab label=\"OpenShift 4.x\">\n\n- Review you **Pipeline** in the OpenShift 4.x Console\n    ![Pipelinerun](/images/pipeline.png)\n\n- Review your **Tasks**\n    ![Tasks](/images/tasks.png)\n\n- Review your **Steps**\n    ![Steps](/images/steps.png)\n\n</Tab>\n<Tab label=\"Opensource Tekton Dashboard\">\n\nIf you are running Tekton with IBM Cloud Pak for Applications or Knative with\n Kubernetes managed service your dashboard view will look similar to below.\n\n- Review your **Pipeline**\n    ![PipelineRun](/images/pipeline-os.png)\n\n</Tab>\n\n<Tab label=\"Tekton CLI\">\n\nIf you are running **Tekton** with IBM Cloud Pak for Applications or Knative\n with Kubernetes managed service your dashboard view will look similar to below.\n\n- Review your **Pipeline**\n    ```bash\n    tkn pipelinerun list\n    ```\n- Review **Pipeline** details\n    ```bash\n    tkn pipelinerun describe {pipeline-name}\n    ```\n\n</Tab>\n</Tabs>\n\n### Running Application\n\nOnce the **Tekton** pipeline has successfully completed you can validate your\n app has been successfully deployed.\n\n- Open the OpenShift Console and select the {new-namespace} project and click on **Workloads**\n    ![OpenShift](/images/openshiftconsole.png)\n\n- Get the hostname for the application from ingress\n    ```bash\n    kubectl get ingress --all-namespace\n    ```\n- You can use the the `igc` command to get the name of the deployed application\n    ```bash\n    igc ingress -n {new-namespace}\n    ```\n\n- Use the application URL to open it your browser for testing\n\nOnce you become familiar with deploying code into OpenShift using **Tekton\n**, read up about how you can manage code deployment with `Continuous\n Delivery` with `ArgoCD` and `Artifactory`\n\n","type":"Mdx","contentDigest":"3808dc71d8348a9c07699704fcbe1e1e","counter":644,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Continuous Integration with Jenkins"},"exports":{},"rawBody":"---\ntitle: Continuous Integration with Jenkins\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nUse Jenkins to automate your continuous integration process\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink to=\"#what-is-jekins\">What is Jenkins</AnchorLink>\n  <AnchorLink to=\"#what-is-tekton\">What is Tekton</AnchorLink>\n</AnchorLinks>\n\nIn IBM Garage Method, one of the Develop practices is [continuous integration](https://www.ibm.com/garage/method/practices/code/practice_continuous_integration/). The <Globals name=\"env\" /> uses a Jenkins pipeline to automate continuous integration.\n\n## What is continuous integration\n\nContinuous integration is a software development technique where software is built regularly by a team in an automated fashion.\nThis quote helps explain it:\n\n> Continuous Integration is a software development practice where members of a team integrate their work frequently,\n> usually each person integrates at least daily - leading to multiple integrations per day.\n> Each integration is verified by an automated build (including test) to\n> detect integration errors as quickly as possible. Many teams find that this approach leads to significantly\n> reduced integration problems and allows a team to develop cohesive software more rapidly\n> <cite>– Martin Fowler</cite>\n\n## What is Jenkins\n\n[Jenkins](https://jenkins.io/) is a self-contained, open source automation server that can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software.\nIt is a perfect tool for helping manage continuous integration tasks for a wide range of software components.\n\nJenkins Pipeline (or simply \"Pipeline\") is a suite of plugins that supports implementing and integrating continuous delivery pipelines into Jenkins.\n\nA continuous delivery pipeline is an automated expression of your process for getting software from version control right through to your users and customers.\n\nJenkins Pipeline provides an extensible set of tools for modeling simple-to-complex delivery pipelines \"as code.\" The definition of a Jenkins Pipeline is typically written into a text file (called a [Jenkinsfile](https://jenkins.io/doc/pipeline/tour/hello-world/)) that in turn is checked into a project’s source control repository.\n\n### Pipelines\n\nPipelines offer a set of stages or steps that can be chained together to allow a level of software\nautomation. This automation can be tailored to the specific project requirements.\n\nYou can read more information about Jenkins Pipelines [here](https://jenkins.io/doc/book/pipeline/)\n\n### Stages\n\nPipelines are defined in a `Jenkinsfile` that sits in the root of your application code. It defines a number of stages. Each of the [<Globals name=\"templates\" />](/codepatterns/overview) includes a `Jenkinsfile` that offers a number of stages. The stages have been configured to complete the build, test, package, and deploy of the application code. Each stage can use the defined defined `secrets` and `config maps` that were previously configured during the installation of Development cluster setup.\n\n## Developer Tools Pipeline\n\nTo enable application compatibility between Kubernetes and OpenShift, the `Jenkinsfile` is consistent between pipeline registration with\nboth platforms. Also, the Docker images are built from\n[UBI images](https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image)\nso that their containers can run on both platforms.\n\nThese are the stages in the pipeline and a description of what each stage does. The **bold stage names** indicate\nthe stages that are required; the ***italics stage names*** indicate optional stages that can be deleted or will be ignored if the tool\nsupporting the stage is not installed. These stages represent a typical production pipeline flow for a cloud-native application.\n- **Setup**: Clones the code into the pipeline\n- **Build**: Runs the build commands for the code\n- **Test**:\tValidates the unit tests for the code\n- ***Publish pacts***:\tPublishes any pact contracts that have been defined\n- ***Sonar scan***: Runs a sonar code scan of the source code and publishes the results to SonarQube\n- **Verify environment**: Validates the OpenShift or IKS environment configuration is valid\n- **Build image**: Builds the code into a Docker images and stores it in the IBM Cloud Image registry\n- **Deploy to DEV env**:\tDeploys the Docker image tagged version to `dev` namespace using Helm Chart\n- **Health Check**: Validates the Health Endpoint of the deployed application\n- ***Package Helm Chart***: Stores the tagged version of the Helm chart in Artifactory\n- ***Trigger CD Pipeline***: This is a GitOps stage that will update the build number in designated git repo and trigger ArgoCD for deployment to **test**\n\n## Registering Pipelines\n\n- The [<Globals name=\"templates\" />](/ci-cd/cloud-native-codepatterns) are a good place to start to see how `Jenkinsfile` and `Dockerfile` should be configured for use in a Jenkins CI pipeline. To register your git repo, use the CLI. This command automates a number of manual steps you would have to do with Jenkins, including: managing secrets, webhooks, and pipeline registration in the Jenkins tools.\n    ```bash\n    kubectl pipeline\n    ```\n\n- By default, the pipeline will register into the current namespace and will copy all the `configMaps` and `secrets` from the `tools` namespace to this namespace. This means the pipeline can execute, knowing it has access to the key information that enables it to integrate with both the cloud platform and the various development tools.\n\n### Registering Pipeline in new namespace\n\n- You can use any namespace you want to register a pipeline. Using the `kubcectl sync` command it will created you a new namespace for your team. It will copy the necessary `secrets` and `configMaps` into that namespace and configure the build agents pods to run in that namespace.\n    ```bash\n    kubectl sync dev-team-one --jenkins\n    ```\n- You can structure multi teams squads, teams, pairs or students working in the same Development cluster given them their own namespace to work in for CI activities.\n\n- Create a template app and clone it to your Cloud Shell environment\n- Then register the code with the Jenkins environment using the following command\n    ```bash\n    kubectl pipeline\n    ```\n- You will be prompted for you Git Hub Personal Access token\n\n## Continuous deployment\n\nIn addition to continuous integration, the <Globals name=\"env\" /> also supports continuous delivery\nusing Artifactory and ArgoCD you can read up on how to use this in :\n\n\n## What is Tekton\n\nTekton is a new emerging CI tool that has been built to support Kubernetes and OpenShift from the ground up.\n\n[Tekton](https://tekton.dev/) is a powerful yet flexible Kubernetes-native open-source framework for creating continuous integration and delivery (CI/CD) systems. It lets you build, test, and deploy across multiple cloud providers or on-premises systems by abstracting away the underlying implementation details.\n\n### Tekton 101\n\n<iframe width=\"80%\" height=\"315\" src=\"https://www.youtube.com/embed/TWxKD9dLpmk\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\nTekton provides open-source components to help you standardize your CI/CD tooling and processes across vendors, languages, and deployment environments. Industry specifications around pipelines, releases, workflows, and other CI/CD components available with Tekton will work well with existing CI/CD tools such as Jenkins, Jenkins X, Skaffold, and Knative, among others.\n\n- Read the this this [Overview of Tekton](/guides/continuous-integration-tekton-crc#what-is-tekton)\n\n- For more information read up about it [Tekton Tutorial](https://developer.ibm.com/tutorials/knative-build-app-development-with-tekton/)\n\n- For more information read up about it [App Build Tutorial with Tekton](https://developer.ibm.com/tutorials/knative-build-app-development-with-tekton/)\n\nThe IBM Cloud is standardizing on using Tekton in both IBM Cloud DevOps\n service and IBM Cloud Pak for Applications. OpenShift 4.2 will also natively\n  support it.\n\nThis guide will focus on using Tekton when the Development tools have been\n installed in Redhat OpenShift, IBM Kubernetes Managed services and **Red Hat\n  Code Ready Containers** to give you choice for you Continuous Integration\n   cloud native development toolset.\n\n<InlineNotification>\n\n**Note:** This guide will help you set up the [<Globals name=\"templates\" />](/codepatterns/overview) with  **Tekton** and requires that you have installed Tekton with **Red Hat Code Ready Containers 4.2** or have installed open source Tekton into the The IBM Kubernetes Cluster.\n\n</InlineNotification>\n\n### Common App Tasks\n\nThe following gives a description of each `Task` that is commonly used in a\n `Pipeline`. The *Optional* stages can be deleted or ignored if the tool support it is not installed. These stages represent a typical production pipeline flow for a Cloud Native application.\n\n- **Setup** clones the code into the pipeline\n- **Build** runs the build commands for the code\n- **Test**\tvalidates the unit tests for the code\n- **Publish pacts**\t(*optional*) publishes any pact contracts that have been defined\n- **Verify pact** (*optional*) verifies the pact contracts\n- **Sonar scan** (*optional*) runs a sonar code scan of the source code and publishes the results to SonarQube\n- **Build image** Builds the code into a Docker images and stores it in the IBM Cloud Image registry\n- **Deploy to DEV env**\tDeploys the Docker image tagged version to `dev` namespace using Helm Chart\n- **Health Check** Validates the Health Endpoint of the deployed application\n- **Package Helm Chart** (*optional*) Stores the tagged version of the Helm chart into Artifactory\n- **Trigger CD Pipeline** (*optional*) This is a GitOps stage that will\n update the build number in designated git repo and trigger ArgoCD for\n  deployment to **test** namespace\n\n### Install Tekton\n\nTekton can be installed in both RedHat Openshift and IBM Kubernetes manage\n service and RedHat Code Ready Containers. To install the necessary\n  components follow the steps below.\n\n- Install [IBM Garage for Cloud Developer Tools](/admin/overview) on your\n managed OpenShift,CRC or IKS development cluster on the IBM Cloud. This will\n  help configure the tools and `secrets` and `configMap` to make working with\n   IBM Cloud so much easier.\n\n<Tabs>\n\n<Tab label=\"OpenShift 3.11\">\n\n### IBM Cloud Pak for Applications 3.0.1\n\n- Install Tekton on OpenShift 3.11\n    - Install [IBM Cloud Paks for Applications 3.0.1](https://cloud.ibm.com/catalog/content/ibm-cp-applications) on the OpenShift Cluster from the\n     IBM Cloud Catalog Software tab\n\n</Tab>\n\n<Tab label=\"OpenShift 4.x\">\n\n### Install on OpenShift 4.x\n\n- If you have installed the IBM Garage for Cloud Developer Tools into your\n cluster this will automatically install the operator for you.\n\n- Install Tekton on OpenShift 4 including CodeReady Containers (CRC)\n    - Install via operator hub Administrator perspective view, click\n     **Operator Hub** search for `OpenShift Pipelines` and install operator\n\n</Tab>\n\n<Tab label=\"Kubernetes\">\n\n### Install Tekton on IBM Kubernetes Managed Service\n- Install Tekton via Knative add-on (can be found in the **Add On** tab in\n the Kubernetes managed service dashboard)\n, it includes\n Tekton support by default and the Webhook extension.\n- Install [Tekton Dashboard](https://github.com/tektoncd/dashboard#install-dashboard) follow the instructions in the `README.md`\n- Add Ingress endpoint for the **Tekton Dashboard** add a host name that uses\n the IKS cluster subdomain\n    ```yaml\n      apiVersion: extensions/v1beta1\n      kind: Ingress\n      metadata:\n        name: tekton-dashboard\n        namespace: tekton-pipelines\n      spec:\n        rules:\n        - host: tekton-dashboard.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud\n          http:\n            paths:\n            - backend:\n                serviceName: tekton-dashboard\n                servicePort: 9097\n    ```\n- Install [Tekton Webhook Extension](https://github.com/tektoncd/experimental/tree/master/webhooks-extension#install-webhook-extension)\n\n</Tab>\n\n</Tabs>\n\n### Setup Tekton\n\n- Install Tekton pipelines and tasks into the `dev` namespace following the\n instructions in the repository [ibm-garage-tekton-tasks](https://github.com/ibm-garage-cloud/ibm-garage-tekton-tasks/blob/master/README.md)\n- Install the `Tasks`\n    ```bash\n    kubectl create -f ibm-garage-tekton-tasks/tasks/ -n dev\n    ```\n- Install the `Pipelines`\n    ```bash\n    kubectl create -f ibm-garage-tekton-tasks/pipelines/ -n dev\n    ```\n\n### Configure namespace for development\n\n- Install the Tekton CLI `tkn` https://github.com/tektoncd/cli\n\n- Create a new namespace (ie `dev-{initials}`) and copy all config and secrets\n  ```\n  igc namespace -n {new-namespace}\n  ```\n- Set your `new-namespace` the current namespace context\n  ```\n  oc project {new-namespace}\n  ```\n\n- The template `Pipelines` provided support for `Java` or `Node.js` based apps. You can configure your own custom `Tasks` for other runtimes. There are a number of default `Tasks` to get you started they are detailed above. To create an application use one of the provided [<Globals name=\"templates\" />](/codepatterns/overview) these templates work seamlessly with the `Tasks` and `Pipelines` provided.\n\n### Register the App with Tekton\n\nWith Tetkon enabled and your default `Tasks` and `Pipelines` installed into\n the `dev` namespace. You can now configure your applications to be built, packaged, tested and deployed to your OpenShift or Kubernetes development cluster.\n\n- Connect to the pipeline. (See the [IGC CLI](/getting-started/cli) for details about how the `pipeline` command works.)\n\n    ```bash\n    igc pipeline -n dev-{initials} --tekton\n    ```\n\n### Verify the pipeline\n\nTo validate your pipeline have been correctly configured, and has triggered a\n `PipelineRun`\n use the following **Tekton** dashboards or `tkn` CLI to validate it ran\n  correctly without errors.\n\n<Tabs>\n<Tab label=\"OpenShift 4.x\">\n\n- Review you **Pipeline** in the OpenShift 4.x Console\n    ![Pipelinerun](/images/pipeline.png)\n\n- Review your **Tasks**\n    ![Tasks](/images/tasks.png)\n\n- Review your **Steps**\n    ![Steps](/images/steps.png)\n\n</Tab>\n<Tab label=\"Opensource Tekton Dashboard\">\n\nIf you are running Tekton with IBM Cloud Pak for Applications or Knative with\n Kubernetes managed service your dashboard view will look similar to below.\n\n- Review your **Pipeline**\n    ![PipelineRun](/images/pipeline-os.png)\n\n</Tab>\n\n<Tab label=\"Tekton CLI\">\n\nIf you are running **Tekton** with IBM Cloud Pak for Applications or Knative\n with Kubernetes managed service your dashboard view will look similar to below.\n\n- Review your **Pipeline**\n    ```bash\n    tkn pipelinerun list\n    ```\n- Review **Pipeline** details\n    ```bash\n    tkn pipelinerun describe {pipeline-name}\n    ```\n\n</Tab>\n</Tabs>\n\n### Running Application\n\nOnce the **Tekton** pipeline has successfully completed you can validate your\n app has been successfully deployed.\n\n- Open the OpenShift Console and select the {new-namespace} project and click on **Workloads**\n    ![OpenShift](/images/openshiftconsole.png)\n\n- Get the hostname for the application from ingress\n    ```bash\n    kubectl get ingress --all-namespace\n    ```\n- You can use the the `igc` command to get the name of the deployed application\n    ```bash\n    igc ingress -n {new-namespace}\n    ```\n\n- Use the application URL to open it your browser for testing\n\nOnce you become familiar with deploying code into OpenShift using **Tekton\n**, read up about how you can manage code deployment with `Continuous\n Delivery` with `ArgoCD` and `Artifactory`\n\n","fileAbsolutePath":"/Users/johandry/Workspace/ibm/att-cloudnative/ibmcloud-pattern-guide/src/pages/ci-cd/cloud-native-ci-tools/index.mdx"}}}}