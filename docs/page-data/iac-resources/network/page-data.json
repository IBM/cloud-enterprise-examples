{"componentChunkName":"component---src-pages-iac-resources-network-index-mdx","path":"/iac-resources/network/","result":{"pageContext":{"frontmatter":{"title":"IaC to Manage Network Resources","description":"Use IaC to work with Networking services and resources","keywords":"terraform,ibm cloud,network,vpc,subnets"},"relativePagePath":"/iac-resources/network/index.mdx","titleType":"page","MdxNode":{"id":"96fe508f-51b7-5aa2-a290-35d47e873d4c","children":[],"parent":"250c6c12-fdeb-5ef0-8668-095f6d17250e","internal":{"content":"---\ntitle: IaC to Manage Network Resources\ndescription: Use IaC to work with Networking services and resources\nkeywords: 'terraform,ibm cloud,network,vpc,subnets'\n---\n\n<PageDescription>\n\nIaC to manage Network Services Resources\n\n</PageDescription>\n\nEvery infrastructure requires network resources in order to build everything on top of it. This page explain all the Network Resources needed to provision and deploy an application exposing an API about movies. The following diagram shows the network architecture to build in this page.\n\n![Architecture](./images/IaC-Network_Resources.png \"Network Resources Architecture\")\n\nThe code to build these resources can be downloaded from the GitHub repository https://github.com/IBM/cloud-enterprise-examples/ in the directory [06-network](https://github.com/IBM/cloud-enterprise-examples/tree/master/iac/06-network).\n\n<AnchorLinks small>\n  <AnchorLink>VPC</AnchorLink>\n  <AnchorLink>Subnets and Zones</AnchorLink>\n  <AnchorLink>Security Groups</AnchorLink>\n  <AnchorLink>Public Gateways</AnchorLink>\n  <AnchorLink>Floating IP</AnchorLink>\n  <AnchorLink>VPN</AnchorLink>\n  <AnchorLink>Final Terraform code</AnchorLink>\n  <AnchorLink>Clean up</AnchorLink>\n</AnchorLinks>\n\n<!-- <AnchorLink>Network Resources & Data Sources</AnchorLink> -->\n\n## VPC\n\nIBM Cloud Virtual Private Cloud (VPC) allows you to create your own space in the IBM Cloud, to run an isolated environment within the public cloud. VPC gives you the security of a private cloud, with the agility and ease of a public cloud.\n\nTo create a VPC with Terraform use the resource `ibm_is_vpc` providing the `name` and optionally the `resource_group`, add this code to the `network.tf` file.\n\n```hcl path=network.tf\nresource \"ibm_is_vpc\" \"iac_app_vpc\" {\n  name = \"${var.project_name}-${var.environment}-vpc\"\n}\n```\n\nMore parameters are accepted, to know more about them read the [ibm_is_vpc](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources#provider-vps) documentation.\n\n## Subnets and Zones\n\nA  VPC is divided into subnets, using a range of private IP addresses. After creating the VPC you can add one or more subnets. Bu default all resources within the same VPC can communicate with each other, regardless of the subnets.\n\nEach subnet must be contained within a single Zone and cannot span zones. Zones are distinct locations that are engineered to be isolated from failures in other Zones. By launching instances in separate Zones, you can protect your applications from the failure of a single location, helping with security, with reducing latency, and with high availability.\n\nTo create a Subnet with Terraform we use the resource `ibm_is_subnet`, it requires the `name`, the `vpc` and the `zone` where the subnet belongs.\n\nAn example of a simple subnet would be like this\n\n```hcl\nresource \"ibm_is_subnet\" \"iac_app_subnet\" {\n  name            = \"${var.project_name}-${var.environment}-subnet\"\n  vpc             = ibm_is_vpc.iac_app_vpc.id\n  zone            = \"us-south-1\"\n  ipv4_cidr_block = \"10.240.0.0/24\"\n}\n```\n\nThis example creates a subnet named from the project name and environment, in the VPC previously created, in the zone `us-south-1` and with CIDR block `10.240.0.0/24`. These and other parameters are:\n\n| Input parameter | Description |\n|---|---|\n| `name` | name of the subnet  |\n| `vpc` | VPC ID where the subnet is created |\n|\n `zone` | Zone name where the subnet is created |\n| `ipv4_cidr_block` | (optional) IPv4 range of the subnet |\n| `total_ipv4_address_count` | (optional) total number of IPv4 addresses |\n| `network_acl` | (optional) ID of the network ACL for the subnet |\n| `public_gateway` | (optional) ID of the public gateway for the subnet that you want to attach to the subnet. You create the public gateway with the `ibm_is_public_gateway` resource |\n| `resource_group` | (optional) ID of the resource group where you want to create the subnet |\n\nFor more information read the [ibm_is_subnet](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources#subnet) documentation.\n\nIn our use case we need multiple subnets, append the following code to `network.tf` to create them all using the index as part of the name.\n\n```hcl path=network.tf\nresource \"ibm_is_subnet\" \"iac_app_subnet\" {\n  count                    = local.max_size\n  name                     = \"${var.project_name}-${var.environment}-subnet-${format(\"%02s\", count.index)}\"\n  zone                     = var.vpc_zone_names[count.index]\n  vpc                      = ibm_is_vpc.iac_app_vpc.id\n  total_ipv4_address_count = 16\n  public_gateway           = element(ibm_is_public_gateway.pgw.*.id, count.index)\n  resource_group           = data.ibm_resource_group.group.id\n}\n```\n\nInstead of define a CIDR block lets define the total number of IP address and get the default [VPC address prefixes](https://cloud.ibm.com/docs/vpc-on-classic-network?topic=vpc-on-classic-network-working-with-ip-address-ranges-address-prefixes-regions-and-subnets#ibm-cloud-vpc-and-address-prefixes).\n\nThis code creates the subnets in different zones, defined in the list variable `vpc_zone_names` which is in the `variables.tf` file like this.\n\n```hcl path=variables.tf\nvariable \"region\" {\n  default  = \"us-south\"\n}\nvariable \"vpc_zone_names\" {\n  type    = list(string)\n  default = [\"us-south-1\", \"us-south-2\", \"us-south-3\"]\n}\n\nlocals {\n  max_size = length(var.vpc_zone_names)\n}\n```\n\nAs you can see the number of subnets to create depends on the number of zones in the list `vpc_zone_names`.\n\n## Security Groups\n\nA [security group](https://cloud.ibm.com/docs/vpc?topic=vpc-using-security-groups) is like a virtual firewall for your VSI to control inbound and outbound traffic through filtering rules. The default rule (create the security group without rules) denies all traffic, you need to add rules to define the filters for inbound and outbound traffic. These rules allow reverse traffic, this means a rule opening port 80 for inbound traffic also open the port 80 for outbound traffic to the original host.\n\nTo create the security groups and the rules we use the resources `ibm_is_security_group` and `ibm_is_security_group_rule`. Adding the following code to `network.tf` we open the port defined by the user (defaults to `8080`) and port `22` to allow SSH connections (just for testing, we can remove it later) only to the VSI in the first security group.\n\n```hcl path=network.tf\nresource \"ibm_is_security_group\" \"iac_app_security_group\" {\n  name           = \"${var.project_name}-${var.environment}-sg-public\"\n  vpc            = ibm_is_vpc.iac_app_vpc.id\n  resource_group = data.ibm_resource_group.group.id\n}\n\nresource \"ibm_is_security_group_rule\" \"iac_app_security_group_rule_tcp_http\" {\n  count     = local.max_size\n  group     = ibm_is_security_group.iac_app_security_group.id\n  direction = \"inbound\"\n  remote    = ibm_is_subnet.iac_app_subnet[count.index].ipv4_cidr_block\n\n  tcp {\n    port_min = var.port\n    port_max = var.port\n  }\n}\n\nresource \"ibm_is_security_group_rule\" \"iac_app_security_group_rule_tcp_ssh\" {\n  count     = local.max_size\n  group     = ibm_is_security_group.iac_app_security_group.id\n  direction = \"inbound\"\n  remote    = ibm_is_subnet.iac_app_subnet[0].ipv4_cidr_block\n\n  tcp {\n    port_min = 22\n    port_max = 22\n  }\n}\n```\n\nOther option to set access rules to the security group is through the Network Access Control List (ACL) with the [ibm_is_network_acl](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources#network-acl) resource.\n\nThree options are available for enabling communications from your VSI to the public internet:\n\n- Use a public gateway (PGW) to enable communication to the internet for all virtual server instances on the attached subnet. There is no charge for using a PGW, except for the bandwidth used.\n- Use a Floating IP (FIP) to enable communication to and from a single VSI to the internet.\n- Use a VPN gateway.\n\n## Public Gateways\n\nA Public Gateway (PGW) enables a subnet to connect to the Internet. PGW uses Many-to-1 NAT, which means every VSI  with private addresses will use 1 public IP address to talk to the public Internet. The PGW are tie to the VPC and the Zone, allowing internet connection to all the subnets and VSI within that zone.\n\nTo create a PGW we use the `ibm_is_public_gateway` resources like the following code appended to the `network.tf` file.\n\n```hcl path=network.tf\nresource \"ibm_is_public_gateway\" \"pgw\" {\n  count = local.max_size\n  name  = \"${var.project_name}-${var.environment}-pgw-${format(\"%02s\", count.index)}\"\n  vpc   = ibm_is_vpc.iac_app_vpc.id\n  zone  = var.vpc_zone_names[count.index]\n}\n```\n\nBesides the parameters in the example you can also have the optional parameters `resource_group` and `tags`. Among the output parameters we have `floating_ip` with a collection of floating IP addresses that are bound to the public gateway. Every floating IP address is listed with the floating IP `id` and `address`. To report these IP address, lets use the following output variables in the file `output.tf`\n\n```hcl path=output.tf\noutput \"pgw_ip_addresses\" {\n  value = ibm_is_public_gateway.pgw[*].floating_ip.address\n}\n```\n\n## Floating IP\n\nFloating IP addresses are IP addresses that are provided by IBM Cloud and are reachable from the public Internet. An Floating IP is linked to a VSI, Load Balancer or VPN Gateway, allowing internet access to this linked resource only.\n\nHaving a public gateway defined we do not need Floating IP but if you'd like to have them instead of PWG this is the code to add to `network.tf` to link every Floating IP to a VSI.\n\n```hcl path=network.tf\nresource \"ibm_is_floating_ip\" \"iac_app_floating_ip\" {\n  count  = var.max_size\n  name   = \"${var.project_name}-${var.environment}-ip-${format(\"%02s\", count.index)}\"\n  target = ibm_is_instance.iac_app_instance[count.index].primary_network_interface.0.id\n}\n```\n\nTo list the Floating IPs we can use the following code with output variables.\n\n```hcl path=output.tf\noutput \"ip_address\" {\n  value = ibm_is_floating_ip.iac_app_floating_ip[*].address\n}\n```\n\n## VPN\n\nThe last resource to allow internet connection is Virtual Private Network (VPN), a service that is available for users to connect to their IBM Cloud VPC from the Internet, securely. This method may be the best option to connect to your VPC but it may not be suitable for every architecture or requirements.\n\nA simple example, not to be used in this story would be like this.\n\n```hcl\nresource \"ibm_is_vpn_gateway\" \"iac_app_vpn_gateway\" {\n  name   = \"${var.project_name}-${var.environment}-vpn\"\n  subnet = ibm_is_subnet.iac_app_subnet[0].ipv4_cidr_block\n}\n\nresource \"ibm_is_vpn_gateway_connection\" \"VPNGatewayConnection\" {\n  name          = \"${var.project_name}-${var.environment}-vpn-gw\"\n\n  vpn_gateway   = ibm_is_vpn_gateway.iac_app_vpn_gateway.id\n  peer_address  = ibm_is_vpn_gateway.iac_app_vpn_gateway.public_ip_address\n\n  preshared_key = \"VPNDemoPassword\"\n\n  local_cidrs   = [ibm_is_subnet.iac_app_subnet[0].ipv4_cidr_block]\n  peer_cidrs    = [ibm_is_subnet.iac_app_subnet[1].ipv4_cidr_block]\n}\n```\n\nHaving all the resources ready in the `network.tf` file and the variables set, we just need to execute the following terraform commands.\n\n```bash\nterraform init    # Only the first time\nterraform plan\nterraform apply\n```\n\n## Final Terraform code\n\nYou can download the code from the GitHub repository https://github.com/IBM/cloud-enterprise-examples/ in the directory [06-network](https://github.com/IBM/cloud-enterprise-examples/tree/master/iac/06-network) where the main files are:\n\n```hcl path=network.tfresource \"ibm_is_vpc\" \"iac_app_vpc\" {\n  name = \"${var.project_name}-${var.environment}-vpc\"\n}\n\nresource \"ibm_is_subnet\" \"iac_app_subnet\" {\n  count                    = local.max_size\n  name                     = \"${var.project_name}-${var.environment}-subnet-${format(\"%02s\", count.index)}\"\n  zone                     = var.vpc_zone_names[count.index]\n  vpc                      = ibm_is_vpc.iac_app_vpc.id\n  total_ipv4_address_count = 16\n  public_gateway           = element(ibm_is_public_gateway.pgw.*.id, count.index)\n  resource_group           = data.ibm_resource_group.group.id\n}\n\nresource \"ibm_is_security_group\" \"iac_app_security_group\" {\n  name           = \"${var.project_name}-${var.environment}-sg-public\"\n  vpc            = ibm_is_vpc.iac_app_vpc.id\n  resource_group = data.ibm_resource_group.group.id\n}\n\nresource \"ibm_is_security_group_rule\" \"iac_app_security_group_rule_tcp_http\" {\n  count     = local.max_size\n  group     = ibm_is_security_group.iac_app_security_group.id\n  direction = \"inbound\"\n  remote    = ibm_is_subnet.iac_app_subnet[count.index].ipv4_cidr_block\n\n  tcp {\n    port_min = var.port\n    port_max = var.port\n  }\n}\n\nresource \"ibm_is_security_group_rule\" \"iac_app_security_group_rule_tcp_ssh\" {\n  count     = local.max_size\n  group     = ibm_is_security_group.iac_app_security_group.id\n  direction = \"inbound\"\n  remote    = ibm_is_subnet.iac_app_subnet[0].ipv4_cidr_block\n\n  tcp {\n    port_min = 22\n    port_max = 22\n  }\n}\n\nresource \"ibm_is_security_group_rule\" \"iac_app_security_group_rule_all_outbound\" {\n  group     = ibm_is_security_group.iac_app_security_group.id\n  direction = \"outbound\"\n}\n\nresource \"ibm_is_public_gateway\" \"pgw\" {\n  count = local.max_size\n  name  = \"${var.project_name}-${var.environment}-pgw-${format(\"%02s\", count.index)}\"\n  vpc   = ibm_is_vpc.iac_app_vpc.id\n  zone  = var.vpc_zone_names[count.index]\n}\n\n// resource \"ibm_is_floating_ip\" \"iac_app_floating_ip\" {\n//   name   = \"${var.project_name}-${var.environment}-ip-${format(\"%02s\", count.index)}\"\n//   target = ibm_is_instance.iac_app_instance[count.index].primary_network_interface.0.id\n//   count  = var.max_size\n// }\n```\n\n```hcl path=variables.tf\nvariable \"project_name\" {}\nvariable \"environment\" {}\n\nvariable \"port\" {\n  default = 8080\n}\n\nvariable \"resource_group\" {\n  default = \"Default\"\n}\nvariable \"region\" {\n  default = \"us-south\"\n}\nvariable \"vpc_zone_names\" {\n  type    = list(string)\n  default = [\"us-south-1\", \"us-south-2\", \"us-south-3\"]\n}\n\nlocals {\n  max_size = length(var.vpc_zone_names)\n}\n```\n\n```hcl path=output.rf\n// output \"ip_address\" {\n//   value = ibm_is_floating_ip.iac_app_floating_ip[*].address\n// }\n\noutput \"pgw_ip_addresses\" {\n  value = ibm_is_public_gateway.pgw[*].floating_ip.address\n}\n```\n\n## Clean up\n\nTo clean up everything just execute:\n\n```bash\nterraform destroy\n```\n<!--\n## Network Resources & Data Sources\n\n### ibm_is_floating_ip\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#provider-floating-ip)\n\n\n### ibm_is_network_acl\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#network-acl)\n\n\nReference:\n\n- .\n\n### ibm_is_public_gateway\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#provider-public-gateway)\n\n\nReference:\n\n- .\n\n### ibm_is_route\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#provider-route)\n\n\nReference:\n\n- .\n\n### ibm_is_security_group\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#sec-group)\n\n\nReference:\n\n- .\n\n### ibm_is_security_group_rule\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#sec-group-rule)\n\n\nReference:\n\n- .\n\n### ibm_is_security_group_network_interface_attachment\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#sec-group-netint)\n\n\nReference:\n\n- .\n\n### ibm_is_subnet\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#subnet)\n\n[data source](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-data-sources&-access-data-sources#vpc-subnet)\n\nReference:\n\n- .\n\n### ibm_is_vpc\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#provider-vps)\n\n[data source](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-data-sources&-access-data-sources#vpc)\n\nReference:\n\n- [About Virtual Private Cloud](https://cloud.ibm.com/docs/vpc-on-classic?topic=vpc-on-classic-about)\n\n### ibm_is_vpc_address_prefix\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#address-prefix)\n\n\nReference:\n\n- .\n\n### ibm_is_vpn_gateway\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#vpn-gateway)\n\n\nReference:\n\n- .\n\n### ibm_is_vpn_gateway_connection\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#vpn-gateway-connection)\n\n\nReference:\n\n- .\n\n## Network Data Sources\n\n### ibm_is_subnets\n\n*Description*\n\n[data source](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-data-sources&-access-data-sources#vpc-subnets)\n\nReference:\n\n- .\n\n### ibm_is_zone\n\n*Description*\n\n[data source](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-data-sources&-access-data-sources#vpc-zone)\n\nReference:\n\n- .\n\n### ibm_is_zones\n\n*Description*\n\n[data source](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-data-sources&-access-data-sources#vpc-zones)\n\nReference:\n\n- . -->\n","type":"Mdx","contentDigest":"de1ad17da91923e72de07c16c4a363ab","counter":582,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"IaC to Manage Network Resources","description":"Use IaC to work with Networking services and resources","keywords":"terraform,ibm cloud,network,vpc,subnets"},"exports":{},"rawBody":"---\ntitle: IaC to Manage Network Resources\ndescription: Use IaC to work with Networking services and resources\nkeywords: 'terraform,ibm cloud,network,vpc,subnets'\n---\n\n<PageDescription>\n\nIaC to manage Network Services Resources\n\n</PageDescription>\n\nEvery infrastructure requires network resources in order to build everything on top of it. This page explain all the Network Resources needed to provision and deploy an application exposing an API about movies. The following diagram shows the network architecture to build in this page.\n\n![Architecture](./images/IaC-Network_Resources.png \"Network Resources Architecture\")\n\nThe code to build these resources can be downloaded from the GitHub repository https://github.com/IBM/cloud-enterprise-examples/ in the directory [06-network](https://github.com/IBM/cloud-enterprise-examples/tree/master/iac/06-network).\n\n<AnchorLinks small>\n  <AnchorLink>VPC</AnchorLink>\n  <AnchorLink>Subnets and Zones</AnchorLink>\n  <AnchorLink>Security Groups</AnchorLink>\n  <AnchorLink>Public Gateways</AnchorLink>\n  <AnchorLink>Floating IP</AnchorLink>\n  <AnchorLink>VPN</AnchorLink>\n  <AnchorLink>Final Terraform code</AnchorLink>\n  <AnchorLink>Clean up</AnchorLink>\n</AnchorLinks>\n\n<!-- <AnchorLink>Network Resources & Data Sources</AnchorLink> -->\n\n## VPC\n\nIBM Cloud Virtual Private Cloud (VPC) allows you to create your own space in the IBM Cloud, to run an isolated environment within the public cloud. VPC gives you the security of a private cloud, with the agility and ease of a public cloud.\n\nTo create a VPC with Terraform use the resource `ibm_is_vpc` providing the `name` and optionally the `resource_group`, add this code to the `network.tf` file.\n\n```hcl path=network.tf\nresource \"ibm_is_vpc\" \"iac_app_vpc\" {\n  name = \"${var.project_name}-${var.environment}-vpc\"\n}\n```\n\nMore parameters are accepted, to know more about them read the [ibm_is_vpc](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources#provider-vps) documentation.\n\n## Subnets and Zones\n\nA  VPC is divided into subnets, using a range of private IP addresses. After creating the VPC you can add one or more subnets. Bu default all resources within the same VPC can communicate with each other, regardless of the subnets.\n\nEach subnet must be contained within a single Zone and cannot span zones. Zones are distinct locations that are engineered to be isolated from failures in other Zones. By launching instances in separate Zones, you can protect your applications from the failure of a single location, helping with security, with reducing latency, and with high availability.\n\nTo create a Subnet with Terraform we use the resource `ibm_is_subnet`, it requires the `name`, the `vpc` and the `zone` where the subnet belongs.\n\nAn example of a simple subnet would be like this\n\n```hcl\nresource \"ibm_is_subnet\" \"iac_app_subnet\" {\n  name            = \"${var.project_name}-${var.environment}-subnet\"\n  vpc             = ibm_is_vpc.iac_app_vpc.id\n  zone            = \"us-south-1\"\n  ipv4_cidr_block = \"10.240.0.0/24\"\n}\n```\n\nThis example creates a subnet named from the project name and environment, in the VPC previously created, in the zone `us-south-1` and with CIDR block `10.240.0.0/24`. These and other parameters are:\n\n| Input parameter | Description |\n|---|---|\n| `name` | name of the subnet  |\n| `vpc` | VPC ID where the subnet is created |\n|\n `zone` | Zone name where the subnet is created |\n| `ipv4_cidr_block` | (optional) IPv4 range of the subnet |\n| `total_ipv4_address_count` | (optional) total number of IPv4 addresses |\n| `network_acl` | (optional) ID of the network ACL for the subnet |\n| `public_gateway` | (optional) ID of the public gateway for the subnet that you want to attach to the subnet. You create the public gateway with the `ibm_is_public_gateway` resource |\n| `resource_group` | (optional) ID of the resource group where you want to create the subnet |\n\nFor more information read the [ibm_is_subnet](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources#subnet) documentation.\n\nIn our use case we need multiple subnets, append the following code to `network.tf` to create them all using the index as part of the name.\n\n```hcl path=network.tf\nresource \"ibm_is_subnet\" \"iac_app_subnet\" {\n  count                    = local.max_size\n  name                     = \"${var.project_name}-${var.environment}-subnet-${format(\"%02s\", count.index)}\"\n  zone                     = var.vpc_zone_names[count.index]\n  vpc                      = ibm_is_vpc.iac_app_vpc.id\n  total_ipv4_address_count = 16\n  public_gateway           = element(ibm_is_public_gateway.pgw.*.id, count.index)\n  resource_group           = data.ibm_resource_group.group.id\n}\n```\n\nInstead of define a CIDR block lets define the total number of IP address and get the default [VPC address prefixes](https://cloud.ibm.com/docs/vpc-on-classic-network?topic=vpc-on-classic-network-working-with-ip-address-ranges-address-prefixes-regions-and-subnets#ibm-cloud-vpc-and-address-prefixes).\n\nThis code creates the subnets in different zones, defined in the list variable `vpc_zone_names` which is in the `variables.tf` file like this.\n\n```hcl path=variables.tf\nvariable \"region\" {\n  default  = \"us-south\"\n}\nvariable \"vpc_zone_names\" {\n  type    = list(string)\n  default = [\"us-south-1\", \"us-south-2\", \"us-south-3\"]\n}\n\nlocals {\n  max_size = length(var.vpc_zone_names)\n}\n```\n\nAs you can see the number of subnets to create depends on the number of zones in the list `vpc_zone_names`.\n\n## Security Groups\n\nA [security group](https://cloud.ibm.com/docs/vpc?topic=vpc-using-security-groups) is like a virtual firewall for your VSI to control inbound and outbound traffic through filtering rules. The default rule (create the security group without rules) denies all traffic, you need to add rules to define the filters for inbound and outbound traffic. These rules allow reverse traffic, this means a rule opening port 80 for inbound traffic also open the port 80 for outbound traffic to the original host.\n\nTo create the security groups and the rules we use the resources `ibm_is_security_group` and `ibm_is_security_group_rule`. Adding the following code to `network.tf` we open the port defined by the user (defaults to `8080`) and port `22` to allow SSH connections (just for testing, we can remove it later) only to the VSI in the first security group.\n\n```hcl path=network.tf\nresource \"ibm_is_security_group\" \"iac_app_security_group\" {\n  name           = \"${var.project_name}-${var.environment}-sg-public\"\n  vpc            = ibm_is_vpc.iac_app_vpc.id\n  resource_group = data.ibm_resource_group.group.id\n}\n\nresource \"ibm_is_security_group_rule\" \"iac_app_security_group_rule_tcp_http\" {\n  count     = local.max_size\n  group     = ibm_is_security_group.iac_app_security_group.id\n  direction = \"inbound\"\n  remote    = ibm_is_subnet.iac_app_subnet[count.index].ipv4_cidr_block\n\n  tcp {\n    port_min = var.port\n    port_max = var.port\n  }\n}\n\nresource \"ibm_is_security_group_rule\" \"iac_app_security_group_rule_tcp_ssh\" {\n  count     = local.max_size\n  group     = ibm_is_security_group.iac_app_security_group.id\n  direction = \"inbound\"\n  remote    = ibm_is_subnet.iac_app_subnet[0].ipv4_cidr_block\n\n  tcp {\n    port_min = 22\n    port_max = 22\n  }\n}\n```\n\nOther option to set access rules to the security group is through the Network Access Control List (ACL) with the [ibm_is_network_acl](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources#network-acl) resource.\n\nThree options are available for enabling communications from your VSI to the public internet:\n\n- Use a public gateway (PGW) to enable communication to the internet for all virtual server instances on the attached subnet. There is no charge for using a PGW, except for the bandwidth used.\n- Use a Floating IP (FIP) to enable communication to and from a single VSI to the internet.\n- Use a VPN gateway.\n\n## Public Gateways\n\nA Public Gateway (PGW) enables a subnet to connect to the Internet. PGW uses Many-to-1 NAT, which means every VSI  with private addresses will use 1 public IP address to talk to the public Internet. The PGW are tie to the VPC and the Zone, allowing internet connection to all the subnets and VSI within that zone.\n\nTo create a PGW we use the `ibm_is_public_gateway` resources like the following code appended to the `network.tf` file.\n\n```hcl path=network.tf\nresource \"ibm_is_public_gateway\" \"pgw\" {\n  count = local.max_size\n  name  = \"${var.project_name}-${var.environment}-pgw-${format(\"%02s\", count.index)}\"\n  vpc   = ibm_is_vpc.iac_app_vpc.id\n  zone  = var.vpc_zone_names[count.index]\n}\n```\n\nBesides the parameters in the example you can also have the optional parameters `resource_group` and `tags`. Among the output parameters we have `floating_ip` with a collection of floating IP addresses that are bound to the public gateway. Every floating IP address is listed with the floating IP `id` and `address`. To report these IP address, lets use the following output variables in the file `output.tf`\n\n```hcl path=output.tf\noutput \"pgw_ip_addresses\" {\n  value = ibm_is_public_gateway.pgw[*].floating_ip.address\n}\n```\n\n## Floating IP\n\nFloating IP addresses are IP addresses that are provided by IBM Cloud and are reachable from the public Internet. An Floating IP is linked to a VSI, Load Balancer or VPN Gateway, allowing internet access to this linked resource only.\n\nHaving a public gateway defined we do not need Floating IP but if you'd like to have them instead of PWG this is the code to add to `network.tf` to link every Floating IP to a VSI.\n\n```hcl path=network.tf\nresource \"ibm_is_floating_ip\" \"iac_app_floating_ip\" {\n  count  = var.max_size\n  name   = \"${var.project_name}-${var.environment}-ip-${format(\"%02s\", count.index)}\"\n  target = ibm_is_instance.iac_app_instance[count.index].primary_network_interface.0.id\n}\n```\n\nTo list the Floating IPs we can use the following code with output variables.\n\n```hcl path=output.tf\noutput \"ip_address\" {\n  value = ibm_is_floating_ip.iac_app_floating_ip[*].address\n}\n```\n\n## VPN\n\nThe last resource to allow internet connection is Virtual Private Network (VPN), a service that is available for users to connect to their IBM Cloud VPC from the Internet, securely. This method may be the best option to connect to your VPC but it may not be suitable for every architecture or requirements.\n\nA simple example, not to be used in this story would be like this.\n\n```hcl\nresource \"ibm_is_vpn_gateway\" \"iac_app_vpn_gateway\" {\n  name   = \"${var.project_name}-${var.environment}-vpn\"\n  subnet = ibm_is_subnet.iac_app_subnet[0].ipv4_cidr_block\n}\n\nresource \"ibm_is_vpn_gateway_connection\" \"VPNGatewayConnection\" {\n  name          = \"${var.project_name}-${var.environment}-vpn-gw\"\n\n  vpn_gateway   = ibm_is_vpn_gateway.iac_app_vpn_gateway.id\n  peer_address  = ibm_is_vpn_gateway.iac_app_vpn_gateway.public_ip_address\n\n  preshared_key = \"VPNDemoPassword\"\n\n  local_cidrs   = [ibm_is_subnet.iac_app_subnet[0].ipv4_cidr_block]\n  peer_cidrs    = [ibm_is_subnet.iac_app_subnet[1].ipv4_cidr_block]\n}\n```\n\nHaving all the resources ready in the `network.tf` file and the variables set, we just need to execute the following terraform commands.\n\n```bash\nterraform init    # Only the first time\nterraform plan\nterraform apply\n```\n\n## Final Terraform code\n\nYou can download the code from the GitHub repository https://github.com/IBM/cloud-enterprise-examples/ in the directory [06-network](https://github.com/IBM/cloud-enterprise-examples/tree/master/iac/06-network) where the main files are:\n\n```hcl path=network.tfresource \"ibm_is_vpc\" \"iac_app_vpc\" {\n  name = \"${var.project_name}-${var.environment}-vpc\"\n}\n\nresource \"ibm_is_subnet\" \"iac_app_subnet\" {\n  count                    = local.max_size\n  name                     = \"${var.project_name}-${var.environment}-subnet-${format(\"%02s\", count.index)}\"\n  zone                     = var.vpc_zone_names[count.index]\n  vpc                      = ibm_is_vpc.iac_app_vpc.id\n  total_ipv4_address_count = 16\n  public_gateway           = element(ibm_is_public_gateway.pgw.*.id, count.index)\n  resource_group           = data.ibm_resource_group.group.id\n}\n\nresource \"ibm_is_security_group\" \"iac_app_security_group\" {\n  name           = \"${var.project_name}-${var.environment}-sg-public\"\n  vpc            = ibm_is_vpc.iac_app_vpc.id\n  resource_group = data.ibm_resource_group.group.id\n}\n\nresource \"ibm_is_security_group_rule\" \"iac_app_security_group_rule_tcp_http\" {\n  count     = local.max_size\n  group     = ibm_is_security_group.iac_app_security_group.id\n  direction = \"inbound\"\n  remote    = ibm_is_subnet.iac_app_subnet[count.index].ipv4_cidr_block\n\n  tcp {\n    port_min = var.port\n    port_max = var.port\n  }\n}\n\nresource \"ibm_is_security_group_rule\" \"iac_app_security_group_rule_tcp_ssh\" {\n  count     = local.max_size\n  group     = ibm_is_security_group.iac_app_security_group.id\n  direction = \"inbound\"\n  remote    = ibm_is_subnet.iac_app_subnet[0].ipv4_cidr_block\n\n  tcp {\n    port_min = 22\n    port_max = 22\n  }\n}\n\nresource \"ibm_is_security_group_rule\" \"iac_app_security_group_rule_all_outbound\" {\n  group     = ibm_is_security_group.iac_app_security_group.id\n  direction = \"outbound\"\n}\n\nresource \"ibm_is_public_gateway\" \"pgw\" {\n  count = local.max_size\n  name  = \"${var.project_name}-${var.environment}-pgw-${format(\"%02s\", count.index)}\"\n  vpc   = ibm_is_vpc.iac_app_vpc.id\n  zone  = var.vpc_zone_names[count.index]\n}\n\n// resource \"ibm_is_floating_ip\" \"iac_app_floating_ip\" {\n//   name   = \"${var.project_name}-${var.environment}-ip-${format(\"%02s\", count.index)}\"\n//   target = ibm_is_instance.iac_app_instance[count.index].primary_network_interface.0.id\n//   count  = var.max_size\n// }\n```\n\n```hcl path=variables.tf\nvariable \"project_name\" {}\nvariable \"environment\" {}\n\nvariable \"port\" {\n  default = 8080\n}\n\nvariable \"resource_group\" {\n  default = \"Default\"\n}\nvariable \"region\" {\n  default = \"us-south\"\n}\nvariable \"vpc_zone_names\" {\n  type    = list(string)\n  default = [\"us-south-1\", \"us-south-2\", \"us-south-3\"]\n}\n\nlocals {\n  max_size = length(var.vpc_zone_names)\n}\n```\n\n```hcl path=output.rf\n// output \"ip_address\" {\n//   value = ibm_is_floating_ip.iac_app_floating_ip[*].address\n// }\n\noutput \"pgw_ip_addresses\" {\n  value = ibm_is_public_gateway.pgw[*].floating_ip.address\n}\n```\n\n## Clean up\n\nTo clean up everything just execute:\n\n```bash\nterraform destroy\n```\n<!--\n## Network Resources & Data Sources\n\n### ibm_is_floating_ip\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#provider-floating-ip)\n\n\n### ibm_is_network_acl\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#network-acl)\n\n\nReference:\n\n- .\n\n### ibm_is_public_gateway\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#provider-public-gateway)\n\n\nReference:\n\n- .\n\n### ibm_is_route\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#provider-route)\n\n\nReference:\n\n- .\n\n### ibm_is_security_group\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#sec-group)\n\n\nReference:\n\n- .\n\n### ibm_is_security_group_rule\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#sec-group-rule)\n\n\nReference:\n\n- .\n\n### ibm_is_security_group_network_interface_attachment\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#sec-group-netint)\n\n\nReference:\n\n- .\n\n### ibm_is_subnet\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#subnet)\n\n[data source](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-data-sources&-access-data-sources#vpc-subnet)\n\nReference:\n\n- .\n\n### ibm_is_vpc\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#provider-vps)\n\n[data source](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-data-sources&-access-data-sources#vpc)\n\nReference:\n\n- [About Virtual Private Cloud](https://cloud.ibm.com/docs/vpc-on-classic?topic=vpc-on-classic-about)\n\n### ibm_is_vpc_address_prefix\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#address-prefix)\n\n\nReference:\n\n- .\n\n### ibm_is_vpn_gateway\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#vpn-gateway)\n\n\nReference:\n\n- .\n\n### ibm_is_vpn_gateway_connection\n\n*Description*\n\n[resource](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources&-access-data-sources#vpn-gateway-connection)\n\n\nReference:\n\n- .\n\n## Network Data Sources\n\n### ibm_is_subnets\n\n*Description*\n\n[data source](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-data-sources&-access-data-sources#vpc-subnets)\n\nReference:\n\n- .\n\n### ibm_is_zone\n\n*Description*\n\n[data source](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-data-sources&-access-data-sources#vpc-zone)\n\nReference:\n\n- .\n\n### ibm_is_zones\n\n*Description*\n\n[data source](https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-data-sources&-access-data-sources#vpc-zones)\n\nReference:\n\n- . -->\n","fileAbsolutePath":"/Users/johandry/Workspace/ibm/att-cloudnative/ibmcloud-pattern-guide/src/pages/iac-resources/network/index.mdx"}}}}