{"componentChunkName":"component---src-pages-iac-resources-compute-provisioners-index-mdx","path":"/iac-resources/compute/provisioners/","result":{"pageContext":{"frontmatter":{"title":"Using Terraform Provisioners","description":"Use of Terraform Provisioners instead of user_data","keywords":"terraform,ibm cloud,compute,provisioner,user_data,file,remote_exec"},"relativePagePath":"/iac-resources/compute/provisioners/index.mdx","titleType":"page","MdxNode":{"id":"534641fe-cbd1-5be6-ab20-ca91586ec7d5","children":[],"parent":"ebe6fc62-934d-5f38-886c-eaeb630f1b65","internal":{"content":"---\ntitle: Using Terraform Provisioners\ndescription: Use of Terraform Provisioners instead of user_data\nkeywords: 'terraform,ibm cloud,compute,provisioner,user_data,file,remote_exec'\n---\n\n<PageDescription>\n\nUse of Terraform Provisioners instead of user_data\n\n</PageDescription>\n\nThe compute guide pattern uses a Terraform code to do the configuration of the VSI, this configuration is discouraged - even by [Terraform documentation](https://www.terraform.io/docs/provisioners/) - to be done with Terraform Provisioners such as `file` and `remote_exec`. However, this page will explain how to so it, if you still want to use them.\n\nInstead of using the `user_data` attribute, you can use the Terraform [file provisioner](https://www.terraform.io/docs/provisioners/file.html) to deploy the JSON file to the provisioned VSI, and you can use the [remote-exec Provisioner](https://www.terraform.io/docs/provisioners/remote-exec.html) to installs Node.js and [json-server](https://github.com/typicode/json-server), before to start the server.\n\nThat code would be like this inside the `ibm_is_instance.iac_app_instance` resource replacing the `user_data` attribute.\n\n```hcl path=compute.tf\nresource \"ibm_is_instance\" \"iac_app_instance\" {\n  ...\n  provisioner \"file\" {\n    source      = \"db.min.json\"\n    destination = \"/home/ubuntu/db.min.json\"\n    connection {\n      user        = \"ubuntu\"\n      private_key = var.private_key\n      host        = ibm_is_floating_ip.iac_app_floating_ip.address\n    }\n  }\n\n  provisioner \"remote-exec\" {\n    inline = [\n      \"curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -\",\n      \"sudo apt-get install -y nodejs\",\n      \"sudo npm install -g json-server\",\n      \"json-server --watch /home/ubuntu/db.min.json --port ${var.port} --host 0.0.0.0\"\n    ]\n  }\n  ...\n}\n```\n\nAs you can see the `file` provisioner needs the private key to make a connection to the server, so the variable `private_key` is required in a similar way the `public_key` was stored. As the private key contain new lines and Terraform requires one line to assign the value to the variable, let's use the following command:\n\n```bash\necho -n \"private_key = \\\"$(awk -v ORS='\\\\\\\\n' '1' ~/.ssh/id_rsa)\\\"\\n\" >> secret.auto.tfvars\n```\n\nThe variable has to be defined in the `variables.tf` file, like so:\n\n```hcl\nvariable \"private_key\" {}\n```\n\n*INCOMPLETE*\n\n<!-- TODO: Finish this page, there is a cycle error at ibm_is_floating_ip.iac_app_floating_ip.address  -->\n","type":"Mdx","contentDigest":"26304438f71e36564d3365e03a2a700a","counter":586,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Using Terraform Provisioners","description":"Use of Terraform Provisioners instead of user_data","keywords":"terraform,ibm cloud,compute,provisioner,user_data,file,remote_exec"},"exports":{},"rawBody":"---\ntitle: Using Terraform Provisioners\ndescription: Use of Terraform Provisioners instead of user_data\nkeywords: 'terraform,ibm cloud,compute,provisioner,user_data,file,remote_exec'\n---\n\n<PageDescription>\n\nUse of Terraform Provisioners instead of user_data\n\n</PageDescription>\n\nThe compute guide pattern uses a Terraform code to do the configuration of the VSI, this configuration is discouraged - even by [Terraform documentation](https://www.terraform.io/docs/provisioners/) - to be done with Terraform Provisioners such as `file` and `remote_exec`. However, this page will explain how to so it, if you still want to use them.\n\nInstead of using the `user_data` attribute, you can use the Terraform [file provisioner](https://www.terraform.io/docs/provisioners/file.html) to deploy the JSON file to the provisioned VSI, and you can use the [remote-exec Provisioner](https://www.terraform.io/docs/provisioners/remote-exec.html) to installs Node.js and [json-server](https://github.com/typicode/json-server), before to start the server.\n\nThat code would be like this inside the `ibm_is_instance.iac_app_instance` resource replacing the `user_data` attribute.\n\n```hcl path=compute.tf\nresource \"ibm_is_instance\" \"iac_app_instance\" {\n  ...\n  provisioner \"file\" {\n    source      = \"db.min.json\"\n    destination = \"/home/ubuntu/db.min.json\"\n    connection {\n      user        = \"ubuntu\"\n      private_key = var.private_key\n      host        = ibm_is_floating_ip.iac_app_floating_ip.address\n    }\n  }\n\n  provisioner \"remote-exec\" {\n    inline = [\n      \"curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -\",\n      \"sudo apt-get install -y nodejs\",\n      \"sudo npm install -g json-server\",\n      \"json-server --watch /home/ubuntu/db.min.json --port ${var.port} --host 0.0.0.0\"\n    ]\n  }\n  ...\n}\n```\n\nAs you can see the `file` provisioner needs the private key to make a connection to the server, so the variable `private_key` is required in a similar way the `public_key` was stored. As the private key contain new lines and Terraform requires one line to assign the value to the variable, let's use the following command:\n\n```bash\necho -n \"private_key = \\\"$(awk -v ORS='\\\\\\\\n' '1' ~/.ssh/id_rsa)\\\"\\n\" >> secret.auto.tfvars\n```\n\nThe variable has to be defined in the `variables.tf` file, like so:\n\n```hcl\nvariable \"private_key\" {}\n```\n\n*INCOMPLETE*\n\n<!-- TODO: Finish this page, there is a cycle error at ibm_is_floating_ip.iac_app_floating_ip.address  -->\n","fileAbsolutePath":"/Users/johandry/Workspace/ibm/att-cloudnative/ibmcloud-pattern-guide/src/pages/iac-resources/compute/provisioners/index.mdx"}}}}