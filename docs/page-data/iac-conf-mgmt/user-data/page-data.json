{"componentChunkName":"component---src-pages-iac-conf-mgmt-user-data-index-mdx","path":"/iac-conf-mgmt/user-data/","result":{"pageContext":{"frontmatter":{"title":"IaC Configuration Management with User-Data","description":"Use User-Data Cloud-Init and Shell Scripts to do configuration management of the provisioned instances","keywords":"terraform,ibm cloud,config management,cloud-init,script,user-data"},"relativePagePath":"/iac-conf-mgmt/user-data/index.mdx","titleType":"page","MdxNode":{"id":"ad536143-00cc-57aa-823f-14d074597738","children":[],"parent":"1927d1c6-81d1-53b7-9c81-f53ec98a31ef","internal":{"content":"---\ntitle: IaC Configuration Management with User-Data\ndescription: Use User-Data Cloud-Init and Shell Scripts to do configuration management of the provisioned instances\nkeywords: \"terraform,ibm cloud,config management,cloud-init,script,user-data\"\n---\n\n<PageDescription>\n\nConfigure the provisioned instance using User-Data Shell Scripts and Cloud-Init\n\n</PageDescription>\n\n<AnchorLinks small>\n  <AnchorLink>Shell Scripts</AnchorLink>\n  <AnchorLink>Cloud-Init Directives</AnchorLink>\n  <AnchorLink>Cloud-Init Modules</AnchorLink>\n  <AnchorLink>Variables Interpolation & Templates</AnchorLink>\n</AnchorLinks>\n\nUser Data is used to perform common automated configuration tasks and run scripts after the instance starts. This data can be plain text or base64 encoded, the latter is required when we use the IBM Cloud API. The content of the User-Data is sent to the Cloud-Init service of the provisioned instance.\n\nCloud-Init is the de facto industry standard for early-stage initialization of virtual machines in the cloud. There are two common formats of user data: Shell Scripts and Cloud-Init directives.\n\n<InlineNotification>\n\n**What other formats are supported?**\n\nShell scripts and Cloud-Init directive are the most common, however, they are not the only user-data formats supported. Cloud-Init also supports [Include Files](https://cloudinit.readthedocs.io/en/latest/topics/format.html#include-file), [Upstart Jobs](https://cloudinit.readthedocs.io/en/latest/topics/format.html#upstart-job), [Cloud Boothooks](https://cloudinit.readthedocs.io/en/latest/topics/format.html#cloud-boothook) and [Part Handler](https://cloudinit.readthedocs.io/en/latest/topics/format.html#part-handler).\n\nYou can also disable User-Data using the directive `allow_userdata: false` to avoid accepting future deployed user-data.\n\n</InlineNotification>\n\n## Shell Scripts\n\nThis is the easiest way to send commands to an instance to execute once it has started. It's very important the shell script starts with a [shebang](https://bash.cyberciti.biz/guide/Shebang), the `#!` characters followed by a path pointing to the interpreter to execute the script. This script is commonly Bash (`#! /bin/bash`) but could be any scripting language like Python or Perl, as long as the interpreter is pre-installed in your instance. It's also very common to use the `env` command in the shebang pointing to the interpreter like this `#!/usr/bin/env bash`.\n\nThe script is executed as `root` user, so there is no need to use the `sudo` command. This means the files created are owned by `root` so make sure to assign the right owner and permissions once they are created. Avoid commands that require user input, make sure the scripts run non-interactively, using the appropriate command parameters (i.e. `-y`) to make them non-interactive or use commands like `yes`.\n\nNotice that when Terraform or Schematics gets the instance up and running the user data script starts and Terraform continues with the provisioning of the other resources. This means the user data shell script is being executed in parallel to other Terraform provisioning and in some cases after Terraform completes. As needed depending on the script, allow some time after Terraform is done to verify the shell script is complete.\n\nIf something goes wrong or you'd like to see the status of the script execution check the log file at `/var/log/cloud-init-output.log`. It may be useful to set the `-x` option to [debug bash scripts](https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_02_03.html) or to know what command is being executed, as the log file only shows the output of the commands by default. Set the `-x` option in the shebang or enable/disable the debug option in part of the code using `set`, like so:\n\n```bash\n#!/bin/bash -x\n\n# Or using set:\nset -x    # enable debugging\necho \"do something here\"\nset +x    # disable debugging\n```\n\nThe execution of the shell script is performed by Cloud-Init. The content of the script is copied to a file located in `/var/lib/cloud/instances/instance-id/`. After the execution the script is not deleted, so you can use it for debugging or future execution. However if it's not needed, or if it has sensitive information, it's recommended to delete it. For additional debugging options check the Cloud-Init section below.\n\nThe user data or Cloud-Init script is only executed during the provisioning of the instance. If the instance is rebooted the script is not executed again, however, this can be changed using Cloud-Init directives.\n\nHere is one example of a user data script from the terraform compute resource example:\n\n```hcl\nresource \"ibm_is_instance\" \"iac_app_instance\" {\n  ...\n  user_data = <<-EOUD\n            #!/bin/bash\n            echo '${data.local_file.db.content_base64}' | base64 --decode > /var/lib/db.min.json\n\n            # https://askubuntu.com/questions/1154892/prevent-question-restart-services-during-package-upgrades-without-asking\n            echo '* libraries/restart-without-asking boolean true' | debconf-set-selections\n\n            apt update\n            curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -\n            apt-get install -y nodejs\n            npm install -g json-server\n\n            json-server --watch /var/lib/db.min.json --port ${var.port} --host 0.0.0.0 &\n            EOUD\n  ...\n}\n```\n\n## Cloud-Init Directives\n\nAll the data passed in the `user_data` parameter is interpreted by Cloud-Init, even if it's a shell script as in the previous section. However, Cloud-Init can do more tasks than execute a script and it accepts multiple configuration settings.\n\nCloud-Init directives are also sent with the `user_data` parameter in the same way that a script is provided, but the syntax is different. The data begins with `#cloud-config` (this is not a shebang) and must be valid YAML syntax.\n\nWhen Cloud-Init starts it runs a collection of modules, these modules are listed in the [Cloud-Init documentation](https://cloudinit.readthedocs.io/en/latest/topics/modules.html) and they are configured using directives in YAML syntax. Some modules are executed by IBM Cloud such as the SSH module to setup the SSH Keys to allow you to login to the instances, and Mounts to mount the given volumes to the instance. The most common tasks that are done with Cloud-Init are achieved using modules.\n\nThe example used in the [Getting Started with Terraform](/iac/getting-started-terraform) is provided as a bash script, the same code using Cloud-Init would be:\n\n```yaml\n#cloud-config\nwrite_files:\n  - content: |\n      Hello World\n    path: /index.html\nruncmd:\n  - nohup busybox httpd -f -p 8080 &\n```\n\nCloud-Init directives must begin with `#cloud-config`, then followed by the the module directives. In this example we use the [Write File](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#write-files) module to write the text `Hello World` under the parameter `content` into the file `/index.html` specified by the parameter `path`. Then we use the module [Runcmd](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#runcmd) to execute a list of command(s) (in this example, a list has just one command).\n\nCloud-Init has five [boot stages](https://cloudinit.readthedocs.io/en/latest/topics/boot.html) and for every stage there are modules executed in an specific order. The file `/etc/cloud/cloud.cfg` can be modified during the [image build phase](/iac/packer) to configure the boot stages, the modules to load and execution order. The sections to modify in the `/etc/cloud/cloud.cfg` file to change the modules to load and execution order are:\n\n- `cloud_init_modules` runs the `disk_setup` and `mounts` modules during the **Network** stage\n- `cloud_config_modules` runs the config modules, including the `runcmd` module, during the **Config** stage\n- `cloud_final_modules` runs scripts and modules for package installation, configuration management (i.e. puppet, chef) and user scripts. This happens during the **Final** stage.\n\nThe `/etc/cloud/cloud.cfg` file also includes configuration data about which user will run Cloud-Init, data sources, and vendor data.\n\n## Cloud-Init Modules\n\nHere are some of the most used Cloud-Init modules and examples. For the entire list of modules and details refer to the [Cloud-Init Modules documentation](https://cloudinit.readthedocs.io/en/latest/topics/modules.html).\n\n- [Users and Groups](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#users-and-groups) defines new users with the key `users` and new groups with the key `groups`.\n\n  ```yaml\n  users:\n    - name: jsmith\n      groups: sudo\n      shell: /bin/bash\n      sudo: ['ALL=(ALL) NOPASSWD:ALL']\n      ssh-authorized-keys:\n        - ssh-rsa AAAA....\n    - name: johnsm\n      sudo: false\n  groups:\n    - dbadmin: johnsm\n  ```\n\n- [Change Passwords](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#set-passwords) change or remove the password of an existing user, and enable/disable SSH password authentication. This module use the directive `ssh_pwauth`, `chpasswd` and `password`. Notice that using `RANDOM` or `R` generate a random password visible in the `/var/log/cloud-init-output.log` log file.\n\n  ```yaml\n  password: defaultInsecurePasswd\n  chpasswd:\n    list: |\n      johnsm:Sup3rP@ssw0rd\n      jsmith:Th3-B35t_P@ssW0rd-Ev3r!\n      httpuser:RANDOM\n    expire: False\n  ```\n\n- [Write Files](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#write-files) creates or appends the given content a file at the given path. The file can be encoded (base64, gzip, or both) with optional permissions and owner. All the parameters but `path` are optional.\n\n  ```yaml\n  write_files:\n    - path: /test.txt\n      content: |\n        Here is a line.\n        Another line is here.\n    - path: /var/lib/db.min.json\n      content: {\"movies\": []}\n  ```\n\n- [Update or Install Packages](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#package-update-upgrade-install) allows packages to be updated, upgraded or installed during boot using the keys `packages`, `package_update` and `package_upgrade`. If a package requires reboot use the directive `package_reboot_if_required`. Use module [Apt Configure](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#apt-configure) to add source list and configure `apt` if you are on Ubuntu or Debian based OS, for RedHat use the module [Yum Add Repo](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#yum-add-repo).\n\n  ```yaml\n  packages:\n      - curl\n      - nodejs\n      - [libpython2.7, 2.7.3-0ubuntu3.1]\n  package_update: True\n  ```\n\n- [SSH Configuration](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#ssh) used to manage SSH keys: assign them to users with `ssh_authorized_keys` and generate keys with `ssh_keys`. This module is always executed by IBM Cloud when an instance is created to assign the SSH Keys.\n\n  ```yaml\n  ssh_keys:\n    rsa_private: |\n      -----BEGIN RSA PRIVATE KEY-----\n      your_rsa_private_key\n      -----END RSA PRIVATE KEY-----\n\n    rsa_public: your_rsa_public_key\n  disable_root: True\n  ssh_authorized_keys:\n      - ssh-rsa AAAA...\n      - ssh-rsa AA3N...\n  ```\n\n- [Trusted CA Certificates](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#ca-certs) to add CA certificates to `/etc/ca-certificates.conf` and update the SSL cert cache.\n\n  ```yaml\n  ca-certs:\n    remove-defaults: True\n    trusted:\n      - |\n        -----BEGIN CERTIFICATE-----\n        your_CA_cert\n        -----END CERTIFICATE-----\n  ```\n\n- [Configure DNS](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#resolv-conf) uses the directive `resolv_conf` to configure the DNS service file `resolv.conf` to use your own DNS server. MAke sure the directive `manage-resolv-conf` is set to True. If there is no DNS server but you need all the instancess know each other, you can use other Hashicorp tools such as [Serf](https://www.serf.io) or [Consul](https://www.consul.io) to create a cluster of instances, collect the IP address of each node and add them to `/etc/hosts`.\n\n  ```yaml\n  manage_resolv_conf: True\n  resolv_conf:\n      nameservers: ['8.8.4.4', '8.8.8.8']\n      searchdomains:\n          - foo.example.com\n          - bar.example.com\n      domain: example.com\n      options:\n          rotate: True\n          timeout: 1\n  ```\n\n- [Hostname](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#set-hostname) & [Etc Hosts](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#update-etc-hosts) are used to set the instance hostname, domain name (`fqdn`) and update them in the `/etc/hosts` file. It allows you to use a template for the /etc/hosts file located in `/etc/cloud/templates/hosts.tmpl`. It's important note that if `manage_etc_hosts` is set the `/etc/hosts` file will be updated in every boot, so any change to this file has to be done in the template.\n\n  ```yaml\n  hostname: app-node\n  fqdn: app-node.example.com\n  manage_etc_hosts: true\n  ```\n\n- [Run Commands](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#runcmd) is very helpful when there is no module for a required task. Using the directive `runcmd` you can execute one or multiple commands. The string with the command to execute are passed to the `sh` shell process to run. The output of all the commands will be logged to the file `/var/log/cloud-init-output.log`.\n\n  ```yaml\n  runcmd:\n    - [ npm, install, -g, json-server]\n    - json-server --watch /var/lib/db.min.json --port 8080 --host 0.0.0.0 &\n  ```\n\n## Variables Interpolation & Templates\n\nWhen a Shell Script or Cloud-Init Directive are used with User-Data in Terraform they can include Terraform variables (input or local variables) or data sources. For example:\n\n```hcl\nresource \"ibm_is_instance\" \"iac_app_instance\" {\n  ...\n  user_data = <<-EOUD\n            #cloud-config\n            packages:\n              - curl\n              - python3-pip\n            package_update: True\n            write_files:\n              - path: /var/lib/db.min.json\n                content: ${data.local_file.db.content}\n            runcmd:\n              - [ pip3, install, json-server.py ]\n              - json-server -b :${var.port} /var/lib/db.min.json &\n            EOUD\n  ...\n}\n```\n\nA best practice and very common way to use User-Data is to have a local variable to store the user data (shell script or cloud-init directives) and set it to the `user_data` parameter. This variable can have the content hard-coded in the Terraform code or can be read from a file or template.\n\nFor example, placing the User-Data Shell Script in the `scripts/init.sh` file:\n\n```bash path=scripts/init.sh\n#!/bin/bash\necho \"'${json_db_b64}'\" | base64 --decode > /var/lib/db.min.json\n\n# https://askubuntu.com/questions/1154892/prevent-question-restart-services-during-package-upgrades-without-asking\necho '* libraries/restart-without-asking boolean true' | debconf-set-selections\n\napt update\napt install -y python3-pip\npip3 install json-server.py\n\njson-server -b :${port} /var/lib/db.min.json &\n```\n\nThen we can reference and use the `scripts/init.sh` like a template using the `templatefile` function to set the `user_data` parameter, like this.\n\n```hcl\nresource \"ibm_is_instance\" \"iac_app_instance\" {\n  ...\n  user_data = templatefile(\"${path.module}/scripts/init.sh\", { json_db_b64 = data.local_file.db.content_base64, port = var.port })\n  ...\n}\n```\n\nIf you are using Terraform 0.11 or lower you need to use the [`template_file`](https://www.terraform.io/docs/providers/template/d/file.html) data source instead of the `templatefile` function.\n","type":"Mdx","contentDigest":"3da5f9721f72de30a56f28c528a290d5","counter":591,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"IaC Configuration Management with User-Data","description":"Use User-Data Cloud-Init and Shell Scripts to do configuration management of the provisioned instances","keywords":"terraform,ibm cloud,config management,cloud-init,script,user-data"},"exports":{},"rawBody":"---\ntitle: IaC Configuration Management with User-Data\ndescription: Use User-Data Cloud-Init and Shell Scripts to do configuration management of the provisioned instances\nkeywords: \"terraform,ibm cloud,config management,cloud-init,script,user-data\"\n---\n\n<PageDescription>\n\nConfigure the provisioned instance using User-Data Shell Scripts and Cloud-Init\n\n</PageDescription>\n\n<AnchorLinks small>\n  <AnchorLink>Shell Scripts</AnchorLink>\n  <AnchorLink>Cloud-Init Directives</AnchorLink>\n  <AnchorLink>Cloud-Init Modules</AnchorLink>\n  <AnchorLink>Variables Interpolation & Templates</AnchorLink>\n</AnchorLinks>\n\nUser Data is used to perform common automated configuration tasks and run scripts after the instance starts. This data can be plain text or base64 encoded, the latter is required when we use the IBM Cloud API. The content of the User-Data is sent to the Cloud-Init service of the provisioned instance.\n\nCloud-Init is the de facto industry standard for early-stage initialization of virtual machines in the cloud. There are two common formats of user data: Shell Scripts and Cloud-Init directives.\n\n<InlineNotification>\n\n**What other formats are supported?**\n\nShell scripts and Cloud-Init directive are the most common, however, they are not the only user-data formats supported. Cloud-Init also supports [Include Files](https://cloudinit.readthedocs.io/en/latest/topics/format.html#include-file), [Upstart Jobs](https://cloudinit.readthedocs.io/en/latest/topics/format.html#upstart-job), [Cloud Boothooks](https://cloudinit.readthedocs.io/en/latest/topics/format.html#cloud-boothook) and [Part Handler](https://cloudinit.readthedocs.io/en/latest/topics/format.html#part-handler).\n\nYou can also disable User-Data using the directive `allow_userdata: false` to avoid accepting future deployed user-data.\n\n</InlineNotification>\n\n## Shell Scripts\n\nThis is the easiest way to send commands to an instance to execute once it has started. It's very important the shell script starts with a [shebang](https://bash.cyberciti.biz/guide/Shebang), the `#!` characters followed by a path pointing to the interpreter to execute the script. This script is commonly Bash (`#! /bin/bash`) but could be any scripting language like Python or Perl, as long as the interpreter is pre-installed in your instance. It's also very common to use the `env` command in the shebang pointing to the interpreter like this `#!/usr/bin/env bash`.\n\nThe script is executed as `root` user, so there is no need to use the `sudo` command. This means the files created are owned by `root` so make sure to assign the right owner and permissions once they are created. Avoid commands that require user input, make sure the scripts run non-interactively, using the appropriate command parameters (i.e. `-y`) to make them non-interactive or use commands like `yes`.\n\nNotice that when Terraform or Schematics gets the instance up and running the user data script starts and Terraform continues with the provisioning of the other resources. This means the user data shell script is being executed in parallel to other Terraform provisioning and in some cases after Terraform completes. As needed depending on the script, allow some time after Terraform is done to verify the shell script is complete.\n\nIf something goes wrong or you'd like to see the status of the script execution check the log file at `/var/log/cloud-init-output.log`. It may be useful to set the `-x` option to [debug bash scripts](https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_02_03.html) or to know what command is being executed, as the log file only shows the output of the commands by default. Set the `-x` option in the shebang or enable/disable the debug option in part of the code using `set`, like so:\n\n```bash\n#!/bin/bash -x\n\n# Or using set:\nset -x    # enable debugging\necho \"do something here\"\nset +x    # disable debugging\n```\n\nThe execution of the shell script is performed by Cloud-Init. The content of the script is copied to a file located in `/var/lib/cloud/instances/instance-id/`. After the execution the script is not deleted, so you can use it for debugging or future execution. However if it's not needed, or if it has sensitive information, it's recommended to delete it. For additional debugging options check the Cloud-Init section below.\n\nThe user data or Cloud-Init script is only executed during the provisioning of the instance. If the instance is rebooted the script is not executed again, however, this can be changed using Cloud-Init directives.\n\nHere is one example of a user data script from the terraform compute resource example:\n\n```hcl\nresource \"ibm_is_instance\" \"iac_app_instance\" {\n  ...\n  user_data = <<-EOUD\n            #!/bin/bash\n            echo '${data.local_file.db.content_base64}' | base64 --decode > /var/lib/db.min.json\n\n            # https://askubuntu.com/questions/1154892/prevent-question-restart-services-during-package-upgrades-without-asking\n            echo '* libraries/restart-without-asking boolean true' | debconf-set-selections\n\n            apt update\n            curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -\n            apt-get install -y nodejs\n            npm install -g json-server\n\n            json-server --watch /var/lib/db.min.json --port ${var.port} --host 0.0.0.0 &\n            EOUD\n  ...\n}\n```\n\n## Cloud-Init Directives\n\nAll the data passed in the `user_data` parameter is interpreted by Cloud-Init, even if it's a shell script as in the previous section. However, Cloud-Init can do more tasks than execute a script and it accepts multiple configuration settings.\n\nCloud-Init directives are also sent with the `user_data` parameter in the same way that a script is provided, but the syntax is different. The data begins with `#cloud-config` (this is not a shebang) and must be valid YAML syntax.\n\nWhen Cloud-Init starts it runs a collection of modules, these modules are listed in the [Cloud-Init documentation](https://cloudinit.readthedocs.io/en/latest/topics/modules.html) and they are configured using directives in YAML syntax. Some modules are executed by IBM Cloud such as the SSH module to setup the SSH Keys to allow you to login to the instances, and Mounts to mount the given volumes to the instance. The most common tasks that are done with Cloud-Init are achieved using modules.\n\nThe example used in the [Getting Started with Terraform](/iac/getting-started-terraform) is provided as a bash script, the same code using Cloud-Init would be:\n\n```yaml\n#cloud-config\nwrite_files:\n  - content: |\n      Hello World\n    path: /index.html\nruncmd:\n  - nohup busybox httpd -f -p 8080 &\n```\n\nCloud-Init directives must begin with `#cloud-config`, then followed by the the module directives. In this example we use the [Write File](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#write-files) module to write the text `Hello World` under the parameter `content` into the file `/index.html` specified by the parameter `path`. Then we use the module [Runcmd](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#runcmd) to execute a list of command(s) (in this example, a list has just one command).\n\nCloud-Init has five [boot stages](https://cloudinit.readthedocs.io/en/latest/topics/boot.html) and for every stage there are modules executed in an specific order. The file `/etc/cloud/cloud.cfg` can be modified during the [image build phase](/iac/packer) to configure the boot stages, the modules to load and execution order. The sections to modify in the `/etc/cloud/cloud.cfg` file to change the modules to load and execution order are:\n\n- `cloud_init_modules` runs the `disk_setup` and `mounts` modules during the **Network** stage\n- `cloud_config_modules` runs the config modules, including the `runcmd` module, during the **Config** stage\n- `cloud_final_modules` runs scripts and modules for package installation, configuration management (i.e. puppet, chef) and user scripts. This happens during the **Final** stage.\n\nThe `/etc/cloud/cloud.cfg` file also includes configuration data about which user will run Cloud-Init, data sources, and vendor data.\n\n## Cloud-Init Modules\n\nHere are some of the most used Cloud-Init modules and examples. For the entire list of modules and details refer to the [Cloud-Init Modules documentation](https://cloudinit.readthedocs.io/en/latest/topics/modules.html).\n\n- [Users and Groups](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#users-and-groups) defines new users with the key `users` and new groups with the key `groups`.\n\n  ```yaml\n  users:\n    - name: jsmith\n      groups: sudo\n      shell: /bin/bash\n      sudo: ['ALL=(ALL) NOPASSWD:ALL']\n      ssh-authorized-keys:\n        - ssh-rsa AAAA....\n    - name: johnsm\n      sudo: false\n  groups:\n    - dbadmin: johnsm\n  ```\n\n- [Change Passwords](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#set-passwords) change or remove the password of an existing user, and enable/disable SSH password authentication. This module use the directive `ssh_pwauth`, `chpasswd` and `password`. Notice that using `RANDOM` or `R` generate a random password visible in the `/var/log/cloud-init-output.log` log file.\n\n  ```yaml\n  password: defaultInsecurePasswd\n  chpasswd:\n    list: |\n      johnsm:Sup3rP@ssw0rd\n      jsmith:Th3-B35t_P@ssW0rd-Ev3r!\n      httpuser:RANDOM\n    expire: False\n  ```\n\n- [Write Files](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#write-files) creates or appends the given content a file at the given path. The file can be encoded (base64, gzip, or both) with optional permissions and owner. All the parameters but `path` are optional.\n\n  ```yaml\n  write_files:\n    - path: /test.txt\n      content: |\n        Here is a line.\n        Another line is here.\n    - path: /var/lib/db.min.json\n      content: {\"movies\": []}\n  ```\n\n- [Update or Install Packages](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#package-update-upgrade-install) allows packages to be updated, upgraded or installed during boot using the keys `packages`, `package_update` and `package_upgrade`. If a package requires reboot use the directive `package_reboot_if_required`. Use module [Apt Configure](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#apt-configure) to add source list and configure `apt` if you are on Ubuntu or Debian based OS, for RedHat use the module [Yum Add Repo](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#yum-add-repo).\n\n  ```yaml\n  packages:\n      - curl\n      - nodejs\n      - [libpython2.7, 2.7.3-0ubuntu3.1]\n  package_update: True\n  ```\n\n- [SSH Configuration](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#ssh) used to manage SSH keys: assign them to users with `ssh_authorized_keys` and generate keys with `ssh_keys`. This module is always executed by IBM Cloud when an instance is created to assign the SSH Keys.\n\n  ```yaml\n  ssh_keys:\n    rsa_private: |\n      -----BEGIN RSA PRIVATE KEY-----\n      your_rsa_private_key\n      -----END RSA PRIVATE KEY-----\n\n    rsa_public: your_rsa_public_key\n  disable_root: True\n  ssh_authorized_keys:\n      - ssh-rsa AAAA...\n      - ssh-rsa AA3N...\n  ```\n\n- [Trusted CA Certificates](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#ca-certs) to add CA certificates to `/etc/ca-certificates.conf` and update the SSL cert cache.\n\n  ```yaml\n  ca-certs:\n    remove-defaults: True\n    trusted:\n      - |\n        -----BEGIN CERTIFICATE-----\n        your_CA_cert\n        -----END CERTIFICATE-----\n  ```\n\n- [Configure DNS](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#resolv-conf) uses the directive `resolv_conf` to configure the DNS service file `resolv.conf` to use your own DNS server. MAke sure the directive `manage-resolv-conf` is set to True. If there is no DNS server but you need all the instancess know each other, you can use other Hashicorp tools such as [Serf](https://www.serf.io) or [Consul](https://www.consul.io) to create a cluster of instances, collect the IP address of each node and add them to `/etc/hosts`.\n\n  ```yaml\n  manage_resolv_conf: True\n  resolv_conf:\n      nameservers: ['8.8.4.4', '8.8.8.8']\n      searchdomains:\n          - foo.example.com\n          - bar.example.com\n      domain: example.com\n      options:\n          rotate: True\n          timeout: 1\n  ```\n\n- [Hostname](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#set-hostname) & [Etc Hosts](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#update-etc-hosts) are used to set the instance hostname, domain name (`fqdn`) and update them in the `/etc/hosts` file. It allows you to use a template for the /etc/hosts file located in `/etc/cloud/templates/hosts.tmpl`. It's important note that if `manage_etc_hosts` is set the `/etc/hosts` file will be updated in every boot, so any change to this file has to be done in the template.\n\n  ```yaml\n  hostname: app-node\n  fqdn: app-node.example.com\n  manage_etc_hosts: true\n  ```\n\n- [Run Commands](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#runcmd) is very helpful when there is no module for a required task. Using the directive `runcmd` you can execute one or multiple commands. The string with the command to execute are passed to the `sh` shell process to run. The output of all the commands will be logged to the file `/var/log/cloud-init-output.log`.\n\n  ```yaml\n  runcmd:\n    - [ npm, install, -g, json-server]\n    - json-server --watch /var/lib/db.min.json --port 8080 --host 0.0.0.0 &\n  ```\n\n## Variables Interpolation & Templates\n\nWhen a Shell Script or Cloud-Init Directive are used with User-Data in Terraform they can include Terraform variables (input or local variables) or data sources. For example:\n\n```hcl\nresource \"ibm_is_instance\" \"iac_app_instance\" {\n  ...\n  user_data = <<-EOUD\n            #cloud-config\n            packages:\n              - curl\n              - python3-pip\n            package_update: True\n            write_files:\n              - path: /var/lib/db.min.json\n                content: ${data.local_file.db.content}\n            runcmd:\n              - [ pip3, install, json-server.py ]\n              - json-server -b :${var.port} /var/lib/db.min.json &\n            EOUD\n  ...\n}\n```\n\nA best practice and very common way to use User-Data is to have a local variable to store the user data (shell script or cloud-init directives) and set it to the `user_data` parameter. This variable can have the content hard-coded in the Terraform code or can be read from a file or template.\n\nFor example, placing the User-Data Shell Script in the `scripts/init.sh` file:\n\n```bash path=scripts/init.sh\n#!/bin/bash\necho \"'${json_db_b64}'\" | base64 --decode > /var/lib/db.min.json\n\n# https://askubuntu.com/questions/1154892/prevent-question-restart-services-during-package-upgrades-without-asking\necho '* libraries/restart-without-asking boolean true' | debconf-set-selections\n\napt update\napt install -y python3-pip\npip3 install json-server.py\n\njson-server -b :${port} /var/lib/db.min.json &\n```\n\nThen we can reference and use the `scripts/init.sh` like a template using the `templatefile` function to set the `user_data` parameter, like this.\n\n```hcl\nresource \"ibm_is_instance\" \"iac_app_instance\" {\n  ...\n  user_data = templatefile(\"${path.module}/scripts/init.sh\", { json_db_b64 = data.local_file.db.content_base64, port = var.port })\n  ...\n}\n```\n\nIf you are using Terraform 0.11 or lower you need to use the [`template_file`](https://www.terraform.io/docs/providers/template/d/file.html) data source instead of the `templatefile` function.\n","fileAbsolutePath":"/Users/johandry/Workspace/ibm/att-cloudnative/ibmcloud-pattern-guide/src/pages/iac-conf-mgmt/user-data/index.mdx"}}}}