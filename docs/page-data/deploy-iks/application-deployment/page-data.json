{"componentChunkName":"component---src-pages-deploy-iks-application-deployment-index-mdx","path":"/deploy-iks/application-deployment/","result":{"pageContext":{"frontmatter":{"title":"Application Deployment on IKS","description":"Overview","keywords":"ibm cloud iks scaling autoscaling"},"relativePagePath":"/deploy-iks/application-deployment/index.mdx","titleType":"page","MdxNode":{"id":"30da79b9-9840-5275-b17c-ddba294661df","children":[],"parent":"a1506180-9c9c-55d5-9831-f1a55275bc7b","internal":{"content":"---\ntitle: Application Deployment on IKS\ndescription: Overview\nkeywords: 'ibm cloud iks scaling autoscaling'\n---\n\nFor this pattern, we have created IKS on VPC which has worker pool (2vCPU and 4GB RAM) with one worker node and will configure autoscale on it. A sample Java application is built which uses WebSphere Liberty as its runtime and perform calculations to increase CPU load. We will build a container image for this application and push the image to IBM Cloud container registry. Then the application will be deployed to IKS using configuration (.yaml) files using the built image.\nFollow the instructions given below to deploy the application.\n\n## Create/Get namespace on IBM Cloud container registry\n\nIBM Cloud Container Registry is used to store and access private container images. To access Cloud Container Registry through Cloud dashboard, click `Navigation > Kubernetes > Registry`\n\nIf you have not created namespace before or you want to use different namespace than existing one then need to create a new namespace. You can create a namespace through interface or using the following commands.\n\n```bash\n$ ibmcloud cr namespace-add <YOUR_NAMESPACE>\n \n# To verify that namespace is created\n$ ibmcloud cr namespace-list\n```\n\n## Prepare deploy target for your container image\n\nYou need to set the correct deploy target for the container image to upload to the accessible container registry. Depending on the region you created your cluster in, your image URL will be in the following format:\n\n```\n<REGION_ABBREVIATION>.icr.io/<YOUR_NAMESPACE>/<YOUR_IMAGE_NAME>:<VERSION>\n```\n\nThe following command tells you the Registry API endpoint for your cluster. You can get region abbreviation from the output.\n\n```bash\nibmcloud cr api\n```\n\nTo get namespace use the following command.\n\n```bash\nibmcloud cr namespaces\n```\n\nYou can choose any name for image and any version. For example, the deploy target for US-South region will be `us.icr.io/my_namespace/scaleapp:1.0`\n\n\n## Deploy an application\n\nPerform the following steps to build an image and push the image to IBM Cloud Container Registry.\n\n```bash\ngit clone https://github.com/IBM/cloud-enterprise-examples.git\n\ncd cloud-enterprise-examples/artifacts/auto-scale/iks-vpc\n\n# Build the image using Dockerfile and push to IBM Cloud Container registry\nibmcloud cr build --tag <YOUR_DEPLOY_TARGET> .\n\n# Verify whether the image is uploaded to the container registry\nibmcloud cr image-list\n```\n\nThe public Ingress application load balancers(ALBs) gets created by default with IBM Kubernetes Service. Ingress is a Kubernetes service that balances network traffic workloads in your cluster by forwarding requests to your apps. To expose an app by using Ingress, you need to register the service of your application with Ingress by defining an Ingress resource. The Ingress resource is a Kubernetes resource that defines the rules for how to route incoming requests for apps.\n\nRun the following command and make a note of the Ingress Subdomain and its secret to be used in Ingress Resource definition as explained further.\n\n```bash\n# To get the cluster name or ID to be used in next command\nibmcloud ks cluster ls\nibmcloud ks cluster get --cluster <your-cluster-name> |grep -i ingres\n```\n\nNow, need to modify `deploy.yaml` as shown below.\n\n- image location for Deployment resource. Use your deploy target used in above step.\n\n```bash \n## macOS\n$ sed -i '' s#IMAGE#<YOUR_DEPLOY_TARGET># deploy.yaml\n\n## Linux\n$ sed -i s#IMAGE#<YOUR_DEPLOY_TARGET># deploy.yaml\n```\n\n- ingress subdomain and secret name (noted before) for Ingress resource\n```bash\n## macOS\n$ sed -i '' s#HOST#<YOUR_INGRESS_SUBDOMAIN># deploy.yaml\n$ sed -i '' s#SECRET#<YOUR_INGRESS_SUBDOMAIN_SECRET># deploy.yaml\n\n## Linux\n$ sed -i s#HOST#<YOUR_INGRESS_SUBDOMAIN># deploy.yaml\n$ sed -i s#SECRET#<YOUR_INGRESS_SUBDOMAIN_SECRET># deploy.yaml\n```\n\nWe are ready to deploy the application now. Run the following command.\n\n```bash\nkubectl create -f deploy.yaml\n```\n\nYou can check the pod status using `kubectl get pods` and its logs using `kubectl logs <pod-name>` command. \nWait for 1-2 minutes as server takes sometime to start and then access the application.\n\n## Access the application\n\nYou can access your application using the Ingress subdomain URL. The paths to your app services are appended to the public route to form a unique app URL. Access the url `https://<YOUR_INGRESS_SUBDOMAIN>/autoscale-webapp`, you will get the following output on your screen.\n\n![Output1](./images/output1.png)\n\nThe compute-intensive operation you can execute by accessing this `http://<YOUR_INGRESS_SUBDOMAIN>/autoscale-webapp/LoadCPUSquareRoot?count=1`.\nThe browser will show the following on your screen.\n\n![Output2](./images/output2.png)\n\nThe usage of Kubernetes cluster resources can be checked using the Kubernetes dashboard as well.\n\nNavigate to `IBM Cloud Dashboard > Clusters > <YOUR_KUBERNETES_CLUSTER>` and then click on Kubernetes Dashboard as shown.\n\n![Access Dashboard](./images/access-dashboard.png)\n\nThe Kubernetes Dashboard will show workloads, resources, their usage and so on. If you have run the compute-intensive operation, then dashboard would show resources usage like the below snapshot.\n\n![Reources Usage](./images/resource-usage.png)","type":"Mdx","contentDigest":"cfbfb0386f65a36f5f6057929252e1d9","counter":619,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Application Deployment on IKS","description":"Overview","keywords":"ibm cloud iks scaling autoscaling"},"exports":{},"rawBody":"---\ntitle: Application Deployment on IKS\ndescription: Overview\nkeywords: 'ibm cloud iks scaling autoscaling'\n---\n\nFor this pattern, we have created IKS on VPC which has worker pool (2vCPU and 4GB RAM) with one worker node and will configure autoscale on it. A sample Java application is built which uses WebSphere Liberty as its runtime and perform calculations to increase CPU load. We will build a container image for this application and push the image to IBM Cloud container registry. Then the application will be deployed to IKS using configuration (.yaml) files using the built image.\nFollow the instructions given below to deploy the application.\n\n## Create/Get namespace on IBM Cloud container registry\n\nIBM Cloud Container Registry is used to store and access private container images. To access Cloud Container Registry through Cloud dashboard, click `Navigation > Kubernetes > Registry`\n\nIf you have not created namespace before or you want to use different namespace than existing one then need to create a new namespace. You can create a namespace through interface or using the following commands.\n\n```bash\n$ ibmcloud cr namespace-add <YOUR_NAMESPACE>\n \n# To verify that namespace is created\n$ ibmcloud cr namespace-list\n```\n\n## Prepare deploy target for your container image\n\nYou need to set the correct deploy target for the container image to upload to the accessible container registry. Depending on the region you created your cluster in, your image URL will be in the following format:\n\n```\n<REGION_ABBREVIATION>.icr.io/<YOUR_NAMESPACE>/<YOUR_IMAGE_NAME>:<VERSION>\n```\n\nThe following command tells you the Registry API endpoint for your cluster. You can get region abbreviation from the output.\n\n```bash\nibmcloud cr api\n```\n\nTo get namespace use the following command.\n\n```bash\nibmcloud cr namespaces\n```\n\nYou can choose any name for image and any version. For example, the deploy target for US-South region will be `us.icr.io/my_namespace/scaleapp:1.0`\n\n\n## Deploy an application\n\nPerform the following steps to build an image and push the image to IBM Cloud Container Registry.\n\n```bash\ngit clone https://github.com/IBM/cloud-enterprise-examples.git\n\ncd cloud-enterprise-examples/artifacts/auto-scale/iks-vpc\n\n# Build the image using Dockerfile and push to IBM Cloud Container registry\nibmcloud cr build --tag <YOUR_DEPLOY_TARGET> .\n\n# Verify whether the image is uploaded to the container registry\nibmcloud cr image-list\n```\n\nThe public Ingress application load balancers(ALBs) gets created by default with IBM Kubernetes Service. Ingress is a Kubernetes service that balances network traffic workloads in your cluster by forwarding requests to your apps. To expose an app by using Ingress, you need to register the service of your application with Ingress by defining an Ingress resource. The Ingress resource is a Kubernetes resource that defines the rules for how to route incoming requests for apps.\n\nRun the following command and make a note of the Ingress Subdomain and its secret to be used in Ingress Resource definition as explained further.\n\n```bash\n# To get the cluster name or ID to be used in next command\nibmcloud ks cluster ls\nibmcloud ks cluster get --cluster <your-cluster-name> |grep -i ingres\n```\n\nNow, need to modify `deploy.yaml` as shown below.\n\n- image location for Deployment resource. Use your deploy target used in above step.\n\n```bash \n## macOS\n$ sed -i '' s#IMAGE#<YOUR_DEPLOY_TARGET># deploy.yaml\n\n## Linux\n$ sed -i s#IMAGE#<YOUR_DEPLOY_TARGET># deploy.yaml\n```\n\n- ingress subdomain and secret name (noted before) for Ingress resource\n```bash\n## macOS\n$ sed -i '' s#HOST#<YOUR_INGRESS_SUBDOMAIN># deploy.yaml\n$ sed -i '' s#SECRET#<YOUR_INGRESS_SUBDOMAIN_SECRET># deploy.yaml\n\n## Linux\n$ sed -i s#HOST#<YOUR_INGRESS_SUBDOMAIN># deploy.yaml\n$ sed -i s#SECRET#<YOUR_INGRESS_SUBDOMAIN_SECRET># deploy.yaml\n```\n\nWe are ready to deploy the application now. Run the following command.\n\n```bash\nkubectl create -f deploy.yaml\n```\n\nYou can check the pod status using `kubectl get pods` and its logs using `kubectl logs <pod-name>` command. \nWait for 1-2 minutes as server takes sometime to start and then access the application.\n\n## Access the application\n\nYou can access your application using the Ingress subdomain URL. The paths to your app services are appended to the public route to form a unique app URL. Access the url `https://<YOUR_INGRESS_SUBDOMAIN>/autoscale-webapp`, you will get the following output on your screen.\n\n![Output1](./images/output1.png)\n\nThe compute-intensive operation you can execute by accessing this `http://<YOUR_INGRESS_SUBDOMAIN>/autoscale-webapp/LoadCPUSquareRoot?count=1`.\nThe browser will show the following on your screen.\n\n![Output2](./images/output2.png)\n\nThe usage of Kubernetes cluster resources can be checked using the Kubernetes dashboard as well.\n\nNavigate to `IBM Cloud Dashboard > Clusters > <YOUR_KUBERNETES_CLUSTER>` and then click on Kubernetes Dashboard as shown.\n\n![Access Dashboard](./images/access-dashboard.png)\n\nThe Kubernetes Dashboard will show workloads, resources, their usage and so on. If you have run the compute-intensive operation, then dashboard would show resources usage like the below snapshot.\n\n![Reources Usage](./images/resource-usage.png)","fileAbsolutePath":"/Users/johandry/Workspace/ibm/att-cloudnative/ibmcloud-pattern-guide/src/pages/deploy-iks/application-deployment/index.mdx"}}}}