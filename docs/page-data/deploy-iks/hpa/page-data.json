{"componentChunkName":"component---src-pages-deploy-iks-hpa-index-mdx","path":"/deploy-iks/hpa/","result":{"pageContext":{"frontmatter":{"title":"Horizontal Pod AutoScaler (HPA)","description":"Overview","keywords":"ibm cloud iks scaling hpa autoscaling"},"relativePagePath":"/deploy-iks/hpa/index.mdx","titleType":"page","MdxNode":{"id":"23c0868b-5c72-570a-b937-5e24093ac486","children":[],"parent":"ea1ee0c4-0722-5fd9-b7ba-5b188748a3cd","internal":{"content":"---\ntitle: Horizontal Pod AutoScaler (HPA)\ndescription: Overview\nkeywords: 'ibm cloud iks scaling hpa autoscaling'\n---\n\nBefore configuring `hpa`, please make sure you have deployed the application as explained in section `Deploy Application to IKS`.\n\n## Configure a HPA resource\n\nRun the following command to configure HPA.\n\n```bash\nkubectl autoscale deployment test --cpu-percent=25 --min=1 --max=5\n```\n\nThis HPA scales up when CPU exceeds 25% of the allocated container resource.\n\nYou can view the HPA using kubectl. You probably will see `<unknown>/25%` for 1-2 minutes and then you should be able to see 0%/25%.\n\n```bash\nkubectl get hpa\n```\n\n## Generate load to trigger scaling\n\nIn the code repository, `generate-load-hpa.yml` is provided, which is used to increase the load on CPU. It creates 10 replicas of a container where each container calls CPU intensive operation in a loop.\n\n- Modify `Ingress subdomain` in `generate-load-hpa.yaml` as shown.\n  ```bash\n  ## macOS\n  $ sed -i '' s#HOST#<YOUR_INGRESS_SUBDOMAIN># generate-load-hpa.yaml\n\n  ## Linux\n  $ sed -i s#HOST#<YOUR_INGRESS_SUBDOMAIN># generate-load-hpa.yaml\n  ```\n- Run the following command from the terminal to increase load.\n\n  ```bash\n  kubectl create -f generate-load-hpa.yaml\n  ```\n\n## Monitor HPA\n\nIn a terminal, you can check the number of pods created.\n\n```bash\nkubectl get pods\n```\n\nIn the another tab, watch the HPA with the following command:\n\n```bash\nkubectl get hpa -w\n```\n\nYou will see HPA scale the pods from 1 up to our configured maximum (5).\n\nThe resource usage can also be checked through Kubernetes dashboard. Access the dashboard, it will show something like this.\n\n![ResourceStatus](./images/cpu-mem-usage.png)\n\nYou can now stop load using the following command.\n\n```bash\nkubectl delete deployment load-generator\n```\nYou will notice that HPA will slowly bring the replica count to min number based on its configuration.\n\n![HPAStatus](./images/kubectl-hpa.png)\n\nOnce the replica count reaches to 1, it means it has scaled-down properly after decreasing load on CPU. Then we can clean-up the hpa configuration using the following command.\n\n```bash\nkubectl delete hpa test\n```","type":"Mdx","contentDigest":"5bc871889dc883a40e5f758b4f0f494c","counter":613,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Horizontal Pod AutoScaler (HPA)","description":"Overview","keywords":"ibm cloud iks scaling hpa autoscaling"},"exports":{},"rawBody":"---\ntitle: Horizontal Pod AutoScaler (HPA)\ndescription: Overview\nkeywords: 'ibm cloud iks scaling hpa autoscaling'\n---\n\nBefore configuring `hpa`, please make sure you have deployed the application as explained in section `Deploy Application to IKS`.\n\n## Configure a HPA resource\n\nRun the following command to configure HPA.\n\n```bash\nkubectl autoscale deployment test --cpu-percent=25 --min=1 --max=5\n```\n\nThis HPA scales up when CPU exceeds 25% of the allocated container resource.\n\nYou can view the HPA using kubectl. You probably will see `<unknown>/25%` for 1-2 minutes and then you should be able to see 0%/25%.\n\n```bash\nkubectl get hpa\n```\n\n## Generate load to trigger scaling\n\nIn the code repository, `generate-load-hpa.yml` is provided, which is used to increase the load on CPU. It creates 10 replicas of a container where each container calls CPU intensive operation in a loop.\n\n- Modify `Ingress subdomain` in `generate-load-hpa.yaml` as shown.\n  ```bash\n  ## macOS\n  $ sed -i '' s#HOST#<YOUR_INGRESS_SUBDOMAIN># generate-load-hpa.yaml\n\n  ## Linux\n  $ sed -i s#HOST#<YOUR_INGRESS_SUBDOMAIN># generate-load-hpa.yaml\n  ```\n- Run the following command from the terminal to increase load.\n\n  ```bash\n  kubectl create -f generate-load-hpa.yaml\n  ```\n\n## Monitor HPA\n\nIn a terminal, you can check the number of pods created.\n\n```bash\nkubectl get pods\n```\n\nIn the another tab, watch the HPA with the following command:\n\n```bash\nkubectl get hpa -w\n```\n\nYou will see HPA scale the pods from 1 up to our configured maximum (5).\n\nThe resource usage can also be checked through Kubernetes dashboard. Access the dashboard, it will show something like this.\n\n![ResourceStatus](./images/cpu-mem-usage.png)\n\nYou can now stop load using the following command.\n\n```bash\nkubectl delete deployment load-generator\n```\nYou will notice that HPA will slowly bring the replica count to min number based on its configuration.\n\n![HPAStatus](./images/kubectl-hpa.png)\n\nOnce the replica count reaches to 1, it means it has scaled-down properly after decreasing load on CPU. Then we can clean-up the hpa configuration using the following command.\n\n```bash\nkubectl delete hpa test\n```","fileAbsolutePath":"/Users/johandry/Workspace/ibm/att-cloudnative/ibmcloud-pattern-guide/src/pages/deploy-iks/hpa/index.mdx"}}}}