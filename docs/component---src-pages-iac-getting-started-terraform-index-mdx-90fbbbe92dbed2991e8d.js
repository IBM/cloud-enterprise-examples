(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{Mb4y:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return o})),a.d(t,"default",(function(){return h}));a("91GP"),a("rGqo"),a("yt8O"),a("Btvt"),a("RW0V"),a("q1tI");var n=a("7ljp"),r=a("013z");a("qKvR");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var o={},l=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(n.b)("div",t)}},b=l("PageDescription"),c=l("AnchorLinks"),p=l("AnchorLink"),s=l("GatsbyLink"),u=l("InlineNotification"),m={_frontmatter:o},d=r.a;function h(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,["components"]);return Object(n.b)(d,i({},m,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)(b,{mdxType:"PageDescription"},Object(n.b)("p",null,"Learn the basics of Infrastructure as Code with Terraform on IBM Cloud")),Object(n.b)("p",null,"After you have configured and verified Terraform and the IBM Cloud provider, this section will go through a step-by-step example of creating a resource on IBM Cloud using the provider. It covers how to create a virtual server from scratch. To do this, there is example terraform code to create a vpc and subnet, add a virtual server to the vpc, configure an access list and expose the virtual server on the Internet, and then access it over ssh. If you are an experienced Terraform user, you may skim through this section and simply note the resource types and parameters used in each step."),Object(n.b)(c,{small:!0,mdxType:"AnchorLinks"},Object(n.b)(p,{mdxType:"AnchorLink"},"Deploy a single instance"),Object(n.b)(p,{mdxType:"AnchorLink"},"“Hello World” from IBM Cloud"),Object(n.b)(p,{mdxType:"AnchorLink"},"Exposing the service to the world in a secure manner"),Object(n.b)(p,{mdxType:"AnchorLink"},"Deploy a configurable server"),Object(n.b)(p,{mdxType:"AnchorLink"},"SSH Access"),Object(n.b)(p,{mdxType:"AnchorLink"},"Final Terraform code"),Object(n.b)(p,{mdxType:"AnchorLink"},"Clean up")),Object(n.b)("h2",null,"Deploy a single instance"),Object(n.b)("p",null,"The first step to use Terraform with IBM Cloud is to configure the provider. Lets start creating a directory to store the “Hello World” project."),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-bash"}),"mkdir hello_world_terraform_ibm\ncd hello_world_terraform_ibm\n")),Object(n.b)("p",null,"Remember to export in the terminal or console the variable ",Object(n.b)("inlineCode",{parentName:"p"},"IC_API_KEY")," with the IBM Cloud API key as shown in the ",Object(n.b)(s,{to:"/iac/setup-environment#configure-access-to-ibm-cloud",mdxType:"GatsbyLink"},"Environment Setup"),"."),Object(n.b)("p",null,"The Terraform code can be done with JSON format or using ",Object(n.b)("strong",{parentName:"p"},"HashiCorp Configuration Language")," (HCL). During this pattern guide we’ll use only HCL and we will call it HCL or Terraform Code."),Object(n.b)("p",null,"The Terraform code can be done with JSON format or using ",Object(n.b)("strong",{parentName:"p"},"HashiCorp Configuration Language")," (HCL). During this pattern guide we’ll use only HCL and we will call it HCL or Terraform Code."),Object(n.b)("p",null,"Create the file ",Object(n.b)("inlineCode",{parentName:"p"},"main.tf")," with the ",Object(n.b)("inlineCode",{parentName:"p"},"provider")," block."),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-hcl"}),'provider "ibm" {\n  generation         = 2\n  region             = "us-south"\n}\n')),Object(n.b)("p",null,"We will be working with VPC Infrastructure Gen 2, the provider accepts the following common input parameters:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",i({parentName:"tr"},{align:null}),"Input parameter"),Object(n.b)("th",i({parentName:"tr"},{align:null}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"generation")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the generation of IBM Cloud VPC Infrastructure, in this case it’ll be ",Object(n.b)("inlineCode",{parentName:"td"},"2"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"region")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the region where you want to create the VPC resources, examples: ",Object(n.b)("inlineCode",{parentName:"td"},"us-south")," or ",Object(n.b)("inlineCode",{parentName:"td"},"us-east"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"ibmcloud_api_key")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the IBM Cloud API key. However we recommend to enter this parameter with the environment variable ",Object(n.b)("inlineCode",{parentName:"td"},"IC_API_KEY"))))),Object(n.b)("p",null,"To find all the available regions with IBM Cloud CLI you can use the ",Object(n.b)("inlineCode",{parentName:"p"},"is")," sub-command (for more information on installing this plugin refer to ",Object(n.b)("a",i({parentName:"p"},{href:"/att-cloudnative/ibmcloud-pattern-guide/iac/setup-environment"}),"Setup Environment"),"):"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-bash"}),"ibmcloud is regions\n")),Object(n.b)("p",null,"Now execute the terraform sub-commands ",Object(n.b)("inlineCode",{parentName:"p"},"init")," and ",Object(n.b)("inlineCode",{parentName:"p"},"plan"),":"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-bash"}),"terraform init\nterraform plan\n")),Object(n.b)("p",null,"The ",Object(n.b)("inlineCode",{parentName:"p"},"init")," sub-command downloads all the terraform components needed to execute or apply the terraform code, in this simple example it does not need to download any, the only component we need is the IBM Cloud provider and it is already installed. You’ll see there is a new ",Object(n.b)("inlineCode",{parentName:"p"},".terraform")," directory, this is where terraform will store all the required components for your terraform project."),Object(n.b)("p",null,"The output of ",Object(n.b)("inlineCode",{parentName:"p"},"plan")," shows the resources that will be created, updated and deleted, in this case terraform won’t do anything."),Object(n.b)("p",null,"To create a VM or instance we use the resource ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_is_instance")," but in order to have an instance you first need the networking resources to build the instance on top of it."),Object(n.b)("p",null,"On IBM Cloud there is no VPC created by default, you will need to create your VPC using the ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_is_vpc")," resource. Then we’ll need a subnet on that VPC, the subnets are created with the resource ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_is_subnet"),"."),Object(n.b)(u,{mdxType:"InlineNotification"},Object(n.b)("h6",null,"Resources naming convention"),Object(n.b)("p",null,"In case you haven’t noticed yet, the IBM Cloud resources begin with ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_"),", the ",Object(n.b)("inlineCode",{parentName:"p"},"is_")," stands for Internet Service.")),Object(n.b)("p",null,"The Terraform code to create the VPC and the Subnet is as follows:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-hcl"}),'resource "ibm_is_vpc" "iac_test_vpc" {\n  name = "terraform-test-vpc"\n  tags = [ "iac-terraform-test" ]\n}\n\nresource "ibm_is_subnet" "iac_test_subnet" {\n  name            = "terraform-test-subnet"\n  vpc             = ibm_is_vpc.iac_test_vpc.id\n  zone            = "us-south-1"\n  tags = [ "iac-terraform-test" ]\n}\n')),Object(n.b)("p",null,"The most important input parameters to create the VPC and the Subnet are listed below."),Object(n.b)("p",null,"For the ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_is_vpc")," resource:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",i({parentName:"tr"},{align:null}),"Input parameter"),Object(n.b)("th",i({parentName:"tr"},{align:null}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"name")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"to name the VPC")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"resource_group")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the ID of the resource group for the VPC, the default resource group is ",Object(n.b)("inlineCode",{parentName:"td"},"default"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"tags")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"tags to associate with your VPC, they will help you to find the VPC more easily. Separate multiple tags with a comma")))),Object(n.b)("p",null,"For the ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_is_subnet")," resource:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",i({parentName:"tr"},{align:null}),"Input parameter"),Object(n.b)("th",i({parentName:"tr"},{align:null}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"name")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"to name the Subnet")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"vpc")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the ID of the VPC, use the resource name with ",Object(n.b)("inlineCode",{parentName:"td"},".id"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"zone")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the subnet zone name")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"resource_group")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the ID of the resource group for the Subnet")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"tags")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"tags to associate with your Subnet, they will help you to find it more easily. Separate multiple tags with a comma")))),Object(n.b)("p",null,"The IBM Cloud virtual server instance is created with the resource ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_is_instance"),", a basic terraform code to create an instance would be like so:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-hcl"}),'resource "ibm_is_instance" "iac_test_instance" {\n  name    = "terraform-test-instance"\n  image   = "r006-14140f94-fcc4-11e9-96e7-a72723715315"\n  profile = "cx2-2x4"\n\n  primary_network_interface {\n    name   = "eth1"\n    subnet = ibm_is_subnet.iac_test_subnet.id\n  }\n\n  vpc  = ibm_is_vpc.iac_test_vpc.id\n  zone = "us-south-1"\n  keys = []\n\n  tags = [ "iac-terraform-test" ]\n}\n')),Object(n.b)("p",null,"Some of the most important input parameters are:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",i({parentName:"tr"},{align:null}),"Input parameter"),Object(n.b)("th",i({parentName:"tr"},{align:null}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"name")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"to name the new instance")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"image")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the ID of the virtual server image to use for the instance")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"profile")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"name of the profile to use for your instance")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"vpc")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the ID of the VPC where you want to create the instance")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"zone")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"name of the VPC zone to create the instance")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"keys")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"a comma separated list of SSH keys that you want to add to your instance")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"primary_network_interface.subnet")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the ID of the subnet. Only one primary network interface can be specified for an instance")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"tags")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"a list of tags to add to your instance. Tags can help you find your instance")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"user_data")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"user data to transfer to the instance")))),Object(n.b)(u,{mdxType:"InlineNotification"},Object(n.b)("h6",null,"VPC Networking and Virtual Servers"),Object(n.b)("p",null,"Check the documentation to know more about ",Object(n.b)("a",i({parentName:"p"},{href:"https://cloud.ibm.com/docs/vpc?topic=vpc-about-networking-for-vpc"}),"Networking for VPC")," and ",Object(n.b)("a",i({parentName:"p"},{href:"https://cloud.ibm.com/docs/vpc?topic=vpc-about-advanced-virtual-servers"}),"Virtual Servers"),".")),Object(n.b)("p",null,"To list all the available images and profiles we will use ",Object(n.b)("inlineCode",{parentName:"p"},"ibmcloud is"),", specify the ",Object(n.b)("strong",{parentName:"p"},"Gen 2")," platform before running the command:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-bash"}),"ibmcloud is target --gen 2        # this is a one time execution only, unless you swap to gen 1\nibmcloud is instance-profiles\nibmcloud is images\n")),Object(n.b)("p",null,"That’s a lot of images, to narrow our search let’s filter the output to get the available images for ",Object(n.b)("inlineCode",{parentName:"p"},"Ubuntu 18.4")," (",Object(n.b)("inlineCode",{parentName:"p"},"LTS Bionic"),") and for ",Object(n.b)("inlineCode",{parentName:"p"},"amd64")," architecture using regular *nix commands or with ",Object(n.b)("inlineCode",{parentName:"p"},"jq"),", if you have ",Object(n.b)("inlineCode",{parentName:"p"},"jq")," installed (",Object(n.b)("a",i({parentName:"p"},{href:"https://github.com/stedolan/jq/wiki/Installation"}),"how to install jq"),"):"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-bash"}),'ibmcloud is images | grep available | grep ubuntu-18 | grep amd64 | cut -f1 -d" "\n\nibmcloud is images --json | jq -r \'.[] | select(.status=="available" and .operating_system.name=="ubuntu-18-04-amd64").id\'\n')),Object(n.b)("p",null,"Repeating for the instance profiles searching just the ",Object(n.b)("inlineCode",{parentName:"p"},"amd64")," architecture with the minimum CPU and Memory to get the lowest cost."),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-bash"}),'ibmcloud is instance-profiles | grep amd64 | sort -k4 -k5 -n | head -1 | cut -f1 -d" "\n\nibmcloud is instance-profiles --json | jq -r \'map(select(.vcpu_architecture.value=="amd64")) | sort_by(.memory.value)[0].name\'\n')),Object(n.b)("p",null,"Notice that in the terraform code there are no ",Object(n.b)("inlineCode",{parentName:"p"},"keys")," this is because the instance will be used only to start a web service, and we are not going to ssh to the instance at this time."),Object(n.b)("p",null,"You can use ",Object(n.b)("inlineCode",{parentName:"p"},"user_data")," to run common configuration tasks when your instance starts. For example, you can specify cloud-init directives or shell scripts for Linux images. You will see an example of using the ",Object(n.b)("inlineCode",{parentName:"p"},"user_data")," parameter in the next session."),Object(n.b)("p",null,"Add to the ",Object(n.b)("inlineCode",{parentName:"p"},"main.tf")," file the terraform code for the vpc, subnet and instance. Now, if you execute ",Object(n.b)("inlineCode",{parentName:"p"},"terraform plan")," it shows the resources that will be created, updated and deleted. In this case terraform will create 3 resources: the VPC, the subnet and the instance."),Object(n.b)("p",null,"Everything is ready now to get that instance in the cloud, just execute the terraform ",Object(n.b)("inlineCode",{parentName:"p"},"apply")," sub-command and wait about 10 to 60 seconds."),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-bash"}),"terraform apply\n")),Object(n.b)(u,{mdxType:"InlineNotification"},Object(n.b)("h6",null,"Can I make it non-interactive?"),Object(n.b)("p",null,"Terraform will ask for confirmation before applying the changes in the terraform code. To skip this confirmation and directly apply the changes use the parameter ",Object(n.b)("inlineCode",{parentName:"p"},"-auto-approve"),"."),Object(n.b)("p",null,"This parameter can also be used with the ",Object(n.b)("inlineCode",{parentName:"p"},"destroy")," sub-command explained below.")),Object(n.b)("h2",null,"“Hello World” from IBM Cloud"),Object(n.b)("p",null,"There is an instance created but it does nothing and you can’t do anything with that instance. Make this instance start a Web server with a “Hello World” page by adding a short script in the ",Object(n.b)("inlineCode",{parentName:"p"},"user_data")," parameter. Now, the ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_is_instance")," resource will look like:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-hcl"}),'resource "ibm_is_instance" "iac_test_instance" {\n  name    = "terraform-test-instance"\n  image   = "r006-14140f94-fcc4-11e9-96e7-a72723715315"\n  profile = "cx2-2x4"\n\n  primary_network_interface {\n    name   = "eth1"\n    subnet = ibm_is_subnet.iac_test_subnet.id\n  }\n\n  vpc  = ibm_is_vpc.iac_test_vpc.id\n  zone = "us-south-1"\n  keys = []\n\n  user_data = <<-EOUD\n              #!/bin/bash\n              echo "Hello World" > index.html\n              nohup busybox httpd -f -p 8080 &\n              EOUD\n\n  tags = [ "iac-terraform-test" ]\n}\n')),Object(n.b)("p",null,"When the instance is up and running we need to know the IP address. You could go to the IBM Cloud console and get it from there, however, there is a more effective way to get the IP address with terraform: use the ",Object(n.b)("inlineCode",{parentName:"p"},"output")," directive."),Object(n.b)("p",null,"Add the following code to your ",Object(n.b)("inlineCode",{parentName:"p"},"main.tf")," file:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-hcl"}),'output "ip_address" {\n  value = ibm_is_instance.iac_test_instance.primary_network_interface[0].primary_ipv4_address\n}\n')),Object(n.b)("p",null,"The beauty of Terraform is that you don’t have to destroy everything and re-create it for every change, the provider will update all the resources that can be updated and re-create those that don’t support an update. In this case, the instance has to be re-created because of the ",Object(n.b)("inlineCode",{parentName:"p"},"user_data"),", but the VPC and subnet will remain intact, as they were not modified. So, to re-apply the changes just execute ",Object(n.b)("inlineCode",{parentName:"p"},"apply")," again:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-bash"}),"terraform apply\n")),Object(n.b)("p",null,"When terraform complete the task, it prints the IP address of the instance. If you need it again, just execute ",Object(n.b)("inlineCode",{parentName:"p"},"terraform output ip_address"),"."),Object(n.b)(u,{mdxType:"InlineNotification"},Object(n.b)("h6",null,"What is the terraform.state file?"),Object(n.b)("p",null,"Terraform keeps the state of the infrastructure in the file ",Object(n.b)("inlineCode",{parentName:"p"},"terraform.state"),". All the resources and variables are in that file. You can read it but it’s not recommended to get data from it in this way as the format may change in a future version of Terraform. Instead use the ",Object(n.b)("inlineCode",{parentName:"p"},"output")," variables and sub-command.")),Object(n.b)(u,{kind:"warning",mdxType:"InlineNotification"},Object(n.b)("h6",null,"Do not delete the terraform.state file"),Object(n.b)("p",null,"If you delete it the next time you want to modify your infrastructure terraform will not know the current state and will complain saying that the resources you want to create already exist."),Object(n.b)("p",null,"If a team is working with the same code make sure the state file is ",Object(n.b)("strong",{parentName:"p"},"securely")," shared among the team members, either using a backend service or IBM Cloud Schematics."),Object(n.b)("p",null,"Do Not store the ",Object(n.b)("inlineCode",{parentName:"p"},"terraform.state")," in your GitHub repository, it may contain sensitive information such as passwords or ssh keys. Make sure the ",Object(n.b)("inlineCode",{parentName:"p"},"terraform.state")," and backup ",Object(n.b)("inlineCode",{parentName:"p"},"terraform.state.backup")," filenames are in the ",Object(n.b)("inlineCode",{parentName:"p"},".gitignore")," file.")),Object(n.b)("p",null,"To view what you have created on the IBM Cloud console, go to the ",Object(n.b)("strong",{parentName:"p"},"Navigation Menu")," (",Object(n.b)("svg",{className:"btn-inactive",focusable:"false",preserveAspectRatio:"xMidYMid meet",width:"20",height:"20",viewBox:"0 0 20 20","aria-hidden":"true"},Object(n.b)("path",{d:"M2 14.8H18V16H2zM2 11.2H18V12.399999999999999H2zM2 7.6H18V8.799999999999999H2zM2 4H18V5.2H2z"})),") >> ",Object(n.b)("strong",{parentName:"p"},"VPC Infrastructure"),", then select ",Object(n.b)("strong",{parentName:"p"},"Network")," >> ",Object(n.b)("strong",{parentName:"p"},"VPCs"),", ",Object(n.b)("strong",{parentName:"p"},"Subnets")," and ",Object(n.b)("strong",{parentName:"p"},"Compute")," >> ",Object(n.b)("strong",{parentName:"p"},"Virtual server instances")," to view all the resources you have created."),Object(n.b)("h2",null,"Exposing the service to the world in a secure manner"),Object(n.b)("p",null,"Now the instance is running and possibly it’s serving a web page with Hello World but unfortunately you can’t see it. You can’t see it because (1) the IP address is private, internal to the IBM Cloud network and (2) there aren’t any firewall rules to allow access to the instance. Resolve that by adding a ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_is_floating_ip"),", a ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_is_security_group_rule")," and a few ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_is_security_group")," resources:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-hcl"}),'resource "ibm_is_floating_ip" "iac_test_floating_ip" {\n  name   = "terraform-test-ip"\n  target = ibm_is_instance.iac_test_instance.primary_network_interface.0.id\n  tags   = [ "iac-terraform-test" ]\n}\n\nresource "ibm_is_security_group" "iac_test_security_group" {\n  name = "terraform-test-sg-public"\n  vpc  = ibm_is_vpc.iac_test_vpc.id\n}\n\nresource "ibm_is_security_group_rule" "iac_test_security_group_rule_tcp_http" {\n  group     = ibm_is_security_group.iac_test_security_group.id\n  direction = "inbound"\n  tcp {\n      port_min = 8080\n      port_max = 8080\n  }\n}\n')),Object(n.b)("p",null,"Then add the new security group to the ",Object(n.b)("inlineCode",{parentName:"p"},"primary_network_interface")," of the instance, so it looks like so:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-hcl"}),'resource "ibm_is_instance" "iac_test_instance" {\n  ...\n  primary_network_interface {\n    name   = "eth1"\n    subnet = ibm_is_subnet.iac_test_subnet.id\n    security_groups = [ ibm_is_security_group.iac_test_security_group.id ]\n  }\n  ...\n}\n')),Object(n.b)("p",null,"The ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_is_floating_ip")," resource creates a floating IP address that can be used to access the targeted instance from the public network."),Object(n.b)("p",null,"The main input parameters are:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",i({parentName:"tr"},{align:null}),"Input parameter"),Object(n.b)("th",i({parentName:"tr"},{align:null}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"name")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"to name the floating IP address")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"resource_group")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the ID of the resource group for the floating IP, the default resource group is ",Object(n.b)("inlineCode",{parentName:"td"},"default"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"tags")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"tags to associate with your floating IPs, they will help you to find them more easily. Separate multiple tags with a comma")))),Object(n.b)("p",null,"The most important output parameter is:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",i({parentName:"tr"},{align:null}),"Output parameter"),Object(n.b)("th",i({parentName:"tr"},{align:null}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"address")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the floating IP address")))),Object(n.b)("p",null,"The ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_is_security_group")," resource allows you to create a virtual firewall with rules to control the inbound and outbound traffic. These rules are created with the resource ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_is_security_group_rule"),"."),Object(n.b)("p",null,"The most important input parameters for ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_is_security_group")," are:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",i({parentName:"tr"},{align:null}),"Input parameter"),Object(n.b)("th",i({parentName:"tr"},{align:null}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"name")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"to name the Security Group")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"vpc")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the VPC ID for the Security Group. Use the ",Object(n.b)("inlineCode",{parentName:"td"},"id")," output parameter of the selected ",Object(n.b)("inlineCode",{parentName:"td"},"ibm_is_vpc")," resource.")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"resource_group")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the ID of the resource group to create the Security Group there")))),Object(n.b)("p",null,"After it’s created you can access all the rules in the security group with the following output parameters:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",i({parentName:"tr"},{align:null}),"Output parameter"),Object(n.b)("th",i({parentName:"tr"},{align:null}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"id")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the Security Group ID")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"rules")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"a nested block describing the rules of this security group")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"rules.direction")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the direction of the traffic either ",Object(n.b)("inlineCode",{parentName:"td"},"inbound")," or ",Object(n.b)("inlineCode",{parentName:"td"},"outbound"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"rules.protocol")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the type of the protocol ",Object(n.b)("inlineCode",{parentName:"td"},"all"),", ",Object(n.b)("inlineCode",{parentName:"td"},"icmp"),", ",Object(n.b)("inlineCode",{parentName:"td"},"tcp")," or ",Object(n.b)("inlineCode",{parentName:"td"},"udp"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"rules.port_max")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the inclusive upper bound of TCP/UDP port range")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"rules.port_min")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the inclusive lower bound of TCP/UDP port range")))),Object(n.b)("p",null,"The ",Object(n.b)("inlineCode",{parentName:"p"},"primary_network_interface")," of the instance and each ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_is_security_group_rule")," will reference the new security group using the ",Object(n.b)("inlineCode",{parentName:"p"},"id")," output parameter."),Object(n.b)("p",null,"Each ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_is_security_group_rule")," defines a traffic rule either for inbound or outbound direction. The most important input parameters are:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",i({parentName:"tr"},{align:null}),"Input parameter"),Object(n.b)("th",i({parentName:"tr"},{align:null}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"group")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the Security Group ID")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"direction")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"direction of the traffic either ",Object(n.b)("inlineCode",{parentName:"td"},"inbound")," or ",Object(n.b)("inlineCode",{parentName:"td"},"outbound"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"tcp")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"a nested block describing the ",Object(n.b)("inlineCode",{parentName:"td"},"tcp")," protocol of this security group rule")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"tcp.port_min")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the inclusive lower bound of TCP port range")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"tcp.port_max")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the inclusive upper bound of TCP port range")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"udp")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"a nested block describing the ",Object(n.b)("inlineCode",{parentName:"td"},"udp")," protocol of this security group rule")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"udp.port_min")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the inclusive lower bound of UDP port range")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"udp.port_max")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the inclusive upper bound of UDP port range")))),Object(n.b)("p",null,"In addition to the protocols ",Object(n.b)("inlineCode",{parentName:"p"},"tcp")," and ",Object(n.b)("inlineCode",{parentName:"p"},"udp")," security group rules recognize ",Object(n.b)("inlineCode",{parentName:"p"},"icmp")," and ",Object(n.b)("inlineCode",{parentName:"p"},"ALL"),"."),Object(n.b)("p",null,"Having now a public IP address and the port 8080 open to inbound traffic to the instance, we can access the Web service. Change the ",Object(n.b)("inlineCode",{parentName:"p"},"ip_address")," output variable to:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-hcl"}),'output "ip_address" {\n  value = ibm_is_floating_ip.iac_test_floating_ip.address\n}\n')),Object(n.b)("p",null,"Apply the changes again and execute the following line to view the output of the published web page:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-bash"}),'$ curl "http://$(terraform output ip_address):8080"\nHello World\n')),Object(n.b)(u,{mdxType:"InlineNotification"},Object(n.b)("h6",null,"Endpoint output variable"),Object(n.b)("p",null,"Notice the use of the terraform output command to get the value of the variable ",Object(n.b)("inlineCode",{parentName:"p"},"ip_address"),". In the same way you can create an output variable named, for example ",Object(n.b)("inlineCode",{parentName:"p"},"endpoint"),", to contain the address for the Web server."),Object(n.b)("p",null,"So, the command to get the web page would be: ",Object(n.b)("inlineCode",{parentName:"p"},"curl $(terraform output endpoint)"))),Object(n.b)("h2",null,"Deploy a configurable server"),Object(n.b)("p",null,"The web server is serving on port 8080 but this port has to be set in the security group and the user data configuration. If we decide to change the port in the user data it may be possible to forget to change it in the other security group or vice versa."),Object(n.b)("p",null,"To make this code more DRY and configurable let’s define an input variable for the port, like so:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-hcl"}),'variable "port" {\n  default = 8080\n}\n')),Object(n.b)("p",null,"We can provide the value of this variable in the following ways, where the earlier option takes precedence over the later:"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"With the ",Object(n.b)("inlineCode",{parentName:"li"},"-var")," command line option of ",Object(n.b)("inlineCode",{parentName:"li"},"terraform")),Object(n.b)("li",{parentName:"ol"},"In variable definitions files (",Object(n.b)("inlineCode",{parentName:"li"},".tfvars"),") such as ",Object(n.b)("inlineCode",{parentName:"li"},"terraform.tfvars")),Object(n.b)("li",{parentName:"ol"},"As environment variables starting with ",Object(n.b)("inlineCode",{parentName:"li"},"TF_VAR_")),Object(n.b)("li",{parentName:"ol"},"Default value in the variable definition")),Object(n.b)("p",null,"So, if we want a port other than ",Object(n.b)("inlineCode",{parentName:"p"},"8080")," just use the parameter ",Object(n.b)("inlineCode",{parentName:"p"},"-var"),":"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-bash"}),'terraform apply -var="port=8081"\n')),Object(n.b)("p",null,"To use the variable in the code, just replace the ",Object(n.b)("inlineCode",{parentName:"p"},"8080")," by ",Object(n.b)("inlineCode",{parentName:"p"},"var.port")," or, in case we want to interpolate the variable in a string, we use ",Object(n.b)("inlineCode",{parentName:"p"},"${var.port}"),". So the changes in the code look like this:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-hcl"}),'resource "ibm_is_instance" "iac_test_instance" {\n  ...\n  user_data = <<-EOUD\n              #!/bin/bash\n              echo "Hello World" > index.html\n              nohup busybox httpd -f -p ${var.port} &\n              EOUD\n  ...\n}\n\nresource "ibm_is_security_group_rule" "iac_test_security_group_rule_tcp_http" {\n  ...\n  tcp {\n      port_min = var.port\n      port_max = var.port\n  }\n}\n')),Object(n.b)("p",null,"Now, execute ",Object(n.b)("inlineCode",{parentName:"p"},"terraform apply")," using the port ",Object(n.b)("inlineCode",{parentName:"p"},"8081"),". Notice that this will re-create the instance and update the other resources."),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-bash"}),'terraform apply -var="port=8081"\ncurl "http://$(terraform output ip_address):8081"\n')),Object(n.b)("p",null,"Alternatively, using environment variables would look like this:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-bash"}),'export TF_VAR_port=8082\nterraform apply\ncurl "http://$(terraform output ip_address):${TF_VAR_port}"\n')),Object(n.b)("h2",null,"SSH Access"),Object(n.b)("p",null,"We accomplished the initial requirements having the Web service running and printing the “Hello World” but what if we want to have SSH access to the instance?"),Object(n.b)("p",null,"Open the ",Object(n.b)("inlineCode",{parentName:"p"},"main.tf")," file to add the resources ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_is_ssh_key")," and ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_is_security_group_rule")," to open port ",Object(n.b)("inlineCode",{parentName:"p"},"22")," to allow SSH access to the instance."),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-hcl"}),'variable "public_key_file"  { default = "~/.ssh/id_rsa.pub" }\nlocals {\n  public_key    = "${file(pathexpand(var.public_key_file))}"\n}\n\nresource "ibm_is_security_group_rule" "iac_test_security_group_rule_tcp_ssh" {\n  group = ibm_is_security_group.iac_test_security_group.id\n  direction = "inbound"\n  tcp {\n      port_min = 22\n      port_max = 22\n  }\n}\n\nresource "ibm_is_ssh_key" "iac_test_key" {\n  name       = "terraform-test-key"\n  public_key = local.public_key\n  tags       = [ "iac-terraform-test" ]\n}\n')),Object(n.b)("p",null,"This SSH Key has to be linked to the instance through the ",Object(n.b)("inlineCode",{parentName:"p"},"keys")," parameter, so replace the ",Object(n.b)("inlineCode",{parentName:"p"},"keys = []")," parameter in the instance ",Object(n.b)("inlineCode",{parentName:"p"},"iac_test_instance")," for:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-hcl"}),"  keys = [ ibm_is_ssh_key.iac_test_key.id ]\n")),Object(n.b)("p",null,"The resource ",Object(n.b)("inlineCode",{parentName:"p"},"ibm_is_ssh_key")," creates a SSH key to access a Gen 2 instance. It requires the following input parameters:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",i({parentName:"tr"},{align:null}),"Input parameter"),Object(n.b)("th",i({parentName:"tr"},{align:null}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"name")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the name of the key")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"public_key")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"the content of the public key")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"resource_group")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"an optional ID of the resource group for the key")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"tags")),Object(n.b)("td",i({parentName:"tr"},{align:null}),"optional tags to associate with your key, they will help you to find it more easily. Separate multiple tags with a comma")))),Object(n.b)("p",null,"Instead of passing to Terraform the content of the public key, this code takes the public key filename in the variable ",Object(n.b)("inlineCode",{parentName:"p"},"public_key_file")," either as a parameter ",Object(n.b)("inlineCode",{parentName:"p"},'-var="public_key_file=FILENAME"')," or as an environment variable ",Object(n.b)("inlineCode",{parentName:"p"},"TF_VAR_public_key_file=FILENAME")," and places the file content into the local variable ",Object(n.b)("inlineCode",{parentName:"p"},"public_key")," which will be used by the IBM Cloud provider to create a SSH Key resource. If no parameter is given for the public key filename, the default value is set to the well known default filename for RSA public keys: ",Object(n.b)("inlineCode",{parentName:"p"},"~/.ssh/id_rsa.pub"),"."),Object(n.b)(u,{mdxType:"InlineNotification"},Object(n.b)("h6",null,"How to create the a key pair?"),Object(n.b)("p",null,"To have access to the instances you need a private and public key. You can use the ",Object(n.b)("inlineCode",{parentName:"p"},"ssh-keygen")," command on Linux or Mac OS X to generate them. Just execute the command ",Object(n.b)("inlineCode",{parentName:"p"},"ssh-keygen")," and follow the instructions. You can read more about SSH Keys in the ",Object(n.b)("a",i({parentName:"p"},{href:"https://cloud.ibm.com/docs/infrastructure/ssh-keys?topic=ssh-keys-getting-started-tutorial"}),"IBM Cloud docs"),".")),Object(n.b)("p",null,"After applying the changes with ",Object(n.b)("inlineCode",{parentName:"p"},"terraform apply")," you can access to the instance with SSH either to login or execute remote commands. For example, use the following command to remotely execute ",Object(n.b)("inlineCode",{parentName:"p"},"echo 'Hello World'")," using the private key ",Object(n.b)("inlineCode",{parentName:"p"},"~/.ssh/id_rsa")),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-bash"}),"$ ssh -i ~/.ssh/id_rsa ubuntu@$(terraform output ip_address) \"echo 'Hello World'\"\nHello World\n")),Object(n.b)("h2",null,"Final Terraform code"),Object(n.b)("p",null,"All the developed code is in a ",Object(n.b)("inlineCode",{parentName:"p"},"main.tf")," file, however to have a more organized project, you can split the Terraform code in different files. This project is simple and small but as your Terraform code grows it is a common pattern to split the code into directories and Terraform Modules. This is something you’ll see in the next section: Getting started with Schematics"),Object(n.b)("p",null,"This code is also available in the ",Object(n.b)("a",i({parentName:"p"},{href:"https://github.com/IBM/cloud-enterprise-examples/tree/master/iac/01-getting-started"}),"Getting Started")," folder of the IaC Pattern Guides GitHub repository."),Object(n.b)("p",null,"Here is an example of how to split the terraform code of this “Hello World” example into a logical structure based on the types of resources being managed."),Object(n.b)("h3",null,Object(n.b)("inlineCode",{parentName:"h3"},"main.tf")),Object(n.b)("p",null,"This file is the first file that Terraform will access, so include here the provider and the instance."),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-hcl",metastring:"path=main.tf",path:"main.tf"}),'provider "ibm" {\n  generation         = 2\n  region             = "us-south"\n}\n\nresource "ibm_is_ssh_key" "iac_test_key" {\n  name       = "terraform-test-key"\n  public_key = local.public_key\n}\n\nresource "ibm_is_instance" "iac_test_instance" {\n  name    = "terraform-test-instance"\n  image   = "r006-14140f94-fcc4-11e9-96e7-a72723715315"\n  profile = "cx2-2x4"\n\n  primary_network_interface {\n    name   = "eth1"\n    subnet = ibm_is_subnet.iac_test_subnet.id\n    security_groups = [ ibm_is_security_group.iac_test_security_group.id ]\n  }\n\n  vpc  = ibm_is_vpc.iac_test_vpc.id\n  zone = "us-south-1"\n  keys = [ ibm_is_ssh_key.iac_test_key.id ]\n\n  user_data = <<-EOUD\n              #!/bin/bash\n              echo "Hello World" > index.html\n              nohup busybox httpd -f -p ${var.port} &\n              EOUD\n\n  tags = [ "iac-terraform-test" ]\n}\n')),Object(n.b)("h3",null,Object(n.b)("inlineCode",{parentName:"h3"},"variables.tf")," and ",Object(n.b)("inlineCode",{parentName:"h3"},"output.tf")),Object(n.b)("p",null,"These 2 files will have all the input and output variables:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-hcl",metastring:"path=variables.tf",path:"variables.tf"}),'variable "public_key_file"  { default = "~/.ssh/id_rsa.pub" }\nlocals {\n  public_key    = "${file(pathexpand(var.public_key_file))}"\n}\n')),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-hcl",metastring:"path=output.tf",path:"output.tf"}),'output "ip_address" {\n  value = ibm_is_floating_ip.iac_test_floating_ip.address\n}\n\noutput "entrypoint" {\n  value = "http://${ibm_is_floating_ip.iac_test_floating_ip.address}:${var.port}/"\n}\n')),Object(n.b)("h3",null,Object(n.b)("inlineCode",{parentName:"h3"},"network.tf")),Object(n.b)("p",null,"All the networking resources will be stored in this file:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-hcl",metastring:"path=network.tf",path:"network.tf"}),'resource "ibm_is_vpc" "iac_test_vpc" {\n  name = "terraform-test-vpc"\n}\n\nresource "ibm_is_subnet" "iac_test_subnet" {\n  name            = "terraform-test-subnet"\n  vpc             = ibm_is_vpc.iac_test_vpc.id\n  zone            = "us-south-1"\n  ipv4_cidr_block = "10.240.0.0/24"\n}\n\nresource "ibm_is_security_group" "iac_test_security_group" {\n  name = "terraform-test-sg-public"\n  vpc = ibm_is_vpc.iac_test_vpc.id\n}\n\nresource "ibm_is_security_group_rule" "iac_test_security_group_rule_all_outbound" {\n  group = ibm_is_security_group.iac_test_security_group.id\n  direction = "outbound"\n}\n\nresource "ibm_is_security_group_rule" "iac_test_security_group_rule_tcp_http" {\n  group = ibm_is_security_group.iac_test_security_group.id\n  direction = "inbound"\n  tcp {\n      port_min = var.port\n      port_max = var.port\n  }\n}\n\nresource "ibm_is_security_group_rule" "iac_test_security_group_rule_tcp_ssh" {\n  group = ibm_is_security_group.iac_test_security_group.id\n  direction = "inbound"\n  tcp {\n      port_min = 22\n      port_max = 22\n  }\n}\n\nresource "ibm_is_floating_ip" "iac_test_floating_ip" {\n  name   = "terraform-test-ip"\n  target = ibm_is_instance.iac_test_instance.primary_network_interface.0.id\n}\n')),Object(n.b)("h3",null,"Other files"),Object(n.b)("p",null,"Besides the Terraform files you will need the following files:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"the SSH keys (default are ",Object(n.b)("inlineCode",{parentName:"li"},"~/.ssh/id_rsa")," and ",Object(n.b)("inlineCode",{parentName:"li"},"~/.ssh/id_rsa.pub"),")."),Object(n.b)("li",{parentName:"ul"},"the ",Object(n.b)("inlineCode",{parentName:"li"},"terraform_key.json")," created to store the IBM Cloud API Key"),Object(n.b)("li",{parentName:"ul"},"the ",Object(n.b)("inlineCode",{parentName:"li"},"terraform.state")," and ",Object(n.b)("inlineCode",{parentName:"li"},"terraform.state.backup")," with the Terraform State")),Object(n.b)("p",null,"Optionally you can also have a ",Object(n.b)("inlineCode",{parentName:"p"},"terraform.tfvars")," to set values to the input variables, like so:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-hcl",metastring:"path=terraform.tfvars",path:"terraform.tfvars"}),"port = 8081\n")),Object(n.b)("p",null,"All these files contain or may contain sensitive information and should not be stored in the GitHub repository. Make sure there is a ",Object(n.b)("inlineCode",{parentName:"p"},".gitignore")," file with the following content:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-git",metastring:"path=.gitignore",path:".gitignore"}),"terraform_key*.json\n.terraform\n*.tfstate*\nid_rsa*\n*.tfvars*\n")),Object(n.b)("h2",null,"Clean up"),Object(n.b)("p",null,"After spending a few minutes admiring your masterpiece and showing it to your friends, you can destroy everything to save money with the command:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-bash"}),"terraform destroy\n")),Object(n.b)("p",null,"After the command completes, if you check the ",Object(n.b)("inlineCode",{parentName:"p"},"terraform.state")," file, it’s almost empty, showing no information about the resources."),Object(n.b)("h2",null,"Reference"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",i({parentName:"li"},{href:"https://cloud.ibm.com/docs/terraform?topic=terraform-getting-started"}),"IBM Cloud / Terraform")," (",Object(n.b)("a",i({parentName:"li"},{href:"https://github.com/ibm-cloud-docs/terraform"}),"Source"),")"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",i({parentName:"li"},{href:"https://cloud.ibm.com/docs/terraform?topic=terraform-setup_cli"}),"Setting up the CLI for Terraform")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",i({parentName:"li"},{href:"https://cloud.ibm.com/docs/terraform?topic=terraform-quick-links"}),"IBM Cloud provider for Terraform")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",i({parentName:"li"},{href:"https://cloud.ibm.com/docs/terraform?topic=terraform-provider-reference#required-parameters"}),Object(n.b)("inlineCode",{parentName:"a"},"provider")," block configuration")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",i({parentName:"li"},{href:"https://cloud.ibm.com/docs/terraform?topic=terraform-vpc-gen2-resources"}),"VPC Infrastructure resources (Gen 2)")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",i({parentName:"li"},{href:"https://cloud.ibm.com/docs/vpc-on-classic-vsi?topic=vpc-on-classic-vsi-user-data"}),"User data")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",i({parentName:"li"},{href:"https://github.com/IBM-Cloud/terraform-provider-ibm"}),"Terraform IBM Cloud provider")),Object(n.b)("li",{parentName:"ul"},"Terraform IBM Cloud provider - ",Object(n.b)("a",i({parentName:"li"},{href:"https://github.com/IBM-Cloud/terraform-provider-ibm/blob/master/website/docs/index.html.markdown"}),"website")," (possible old source of ",Object(n.b)("em",{parentName:"li"},"IBM Cloud / Terraform"),")"),Object(n.b)("li",{parentName:"ul"},"Terraform IBM Cloud provider - ",Object(n.b)("a",i({parentName:"li"},{href:"https://github.com/IBM-Cloud/terraform-provider-ibm/tree/master/examples"}),"examples")),Object(n.b)("li",{parentName:"ul"},"Terraform IBM Cloud provider - ",Object(n.b)("a",i({parentName:"li"},{href:"https://ibm-cloud.github.io/tf-ibm-docs/"}),"docs")," (old version of ",Object(n.b)("em",{parentName:"li"},"IBM Cloud / Terraform"),")"),Object(n.b)("li",{parentName:"ul"},"IBM Cloud - Create a ",Object(n.b)("a",i({parentName:"li"},{href:"https://cloud.ibm.com/vpc/overview"}),"Virtual Private Cloud")," (VPC)"),Object(n.b)("li",{parentName:"ul"},"IBM Cloud - Docs for ",Object(n.b)("a",i({parentName:"li"},{href:"https://cloud.ibm.com/docs/vpc?topic=vpc-getting-started"}),"Virtual Private Cloud")," (VPC)")))}h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-iac-getting-started-terraform-index-mdx-90fbbbe92dbed2991e8d.js.map