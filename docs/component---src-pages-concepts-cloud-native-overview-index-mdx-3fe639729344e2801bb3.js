(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{"4gS/":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return c}));n("91GP"),n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("q1tI");var a=n("7ljp"),i=n("013z");n("qKvR");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var l={},s={_frontmatter:l},r=i.a;function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["components"]);return Object(a.b)(r,o({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",null,"Introduction"),Object(a.b)("p",null,"Cloud is everywhere. Today, many companies want to migrate their\napplications on to cloud. For this migration to be done, the\napplications must be re-architected in a way that they fully utilize the\nadvantages of the cloud."),Object(a.b)("div",{className:"gatsby-resp-iframe-wrapper",style:{paddingBottom:"56.25%",position:"relative",height:"0",overflow:"hidden"}}," ",Object(a.b)("iframe",o({parentName:"div"},{src:"https://www.youtube.com/embed/fp9_ubiKqFU",frameBorder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0,style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}}))," "),Object(a.b)("h2",null,"What is Cloud-Native?"),Object(a.b)("p",null,"Cloud-native is about how we build and run applications taking full\nadvantage of cloud computing rather than worrying about where we deploy\nit."),Object(a.b)("p",null,"Cloud-native refers less to where an application resides and more to how\nit is built and deployed."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"A cloud-native application consists of discrete, reusable components\nknown as microservices that are designed to integrate into any cloud\nenvironment.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"These microservices act as building blocks and are often packaged in\ncontainers.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Microservices work together as a whole to comprise an application,\nyet each can be independently scaled, continuously improved, and\nquickly iterated through automation and orchestration processes.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"The flexibility of each microservice adds to the agility and\ncontinuous improvement of cloud-native applications."))),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"CNCF Cloud Native Definition")),Object(a.b)("p",null,"Cloud native technologies empower organizations to build and run\nscalable applications in modern, dynamic environments such as public,\nprivate, and hybrid clouds. Containers, service meshes, microservices,\nimmutable infrastructure, and declarative APIs exemplify this approach."),Object(a.b)("p",null,"These techniques enable loosely coupled systems that are resilient,\nmanageable, and observable. Combined with robust automation, they allow\nengineers to make high-impact changes frequently and predictably with\nminimal toil."),Object(a.b)("p",null,"The Cloud Native Computing Foundation seeks to drive adoption of this\nparadigm by fostering and sustaining an ecosystem of open source,\nvendor-neutral projects. We democratize state-of-the-art patterns to\nmake these innovations accessible for everyone."),Object(a.b)("h2",null,"Why Cloud-Native?"),Object(a.b)("p",null,"Cloud-native applications are different from the traditional\napplications that run in your data centres. The applications that are\ndesigned in the traditional way are not built keeping cloud\ncompatibility in mind. They may have strong ties with the internal\nsystems. Also, they cannot take advantage of all the benefits of the\ncloud."),Object(a.b)("p",null,"So, we need a new architecture for our applications to utilize the\nbenefits of cloud. There is a need to design the applications keeping\ncloud in mind and take advantage of several cloud services like storage,\nqueuing, caching etc."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Speed, safety, and scalability comes with cloud-native applications.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Helps you to quickly deliver the advancements.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Allows you to have loose ties into the corporate IT where it most\ncertainly would destabilize legacy architectures.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Helps you to continuously deliver your applications with zero\ndowntime.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Infrastructure is less predictable.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Service instances are all disposable.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Deployments are immutable.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"To meet the expectations of the today’s world customers, these\nsystems are architected for elastic scalability."))),Object(a.b)("h2",null,"Cloud-native concepts"),Object(a.b)("p",null,"Some of the important characteristics of cloud-native applications are\nas follows."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Disposable Infrastructure")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Isolation")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Scalability")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Disposable architecture")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Value added cloud services")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Polyglot cloud")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Self-sufficient, full-stack teams")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Cultural Change"))),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Disposable Infrastructure")),Object(a.b)("p",null,"While creating applications on cloud, you need several cloud resources\nas part of it. We often hear how easy it is to create all these\nresources. But did you ever think how easy is it to dispose them. It is\ndefinitely not that easy to dispose them and that is why you don’t hear\na lot about it."),Object(a.b)("p",null,"In traditional or legacy applications, we have all these resources\nresiding on machines. If these go down, we need to redo them again and\nmost of this is handled by the operations team manually. So, when we are\ncreating applications on cloud, we bring those resources like load\nbalancers, databases, gateways, etc on to cloud as well along with\nmachine images and containers."),Object(a.b)("p",null,"While creating these applications, you should always keep in mind that\nif you are creating a resource when required, you should also be able to\ndestroy it when not required. Without this, we cannot achieve the\nfactors speed, safety and scalability. If you want this to happen, we\nneed automation."),Object(a.b)("p",null,"Automation allows you to"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Deliver new features at any time.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Deliver patches faster.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Improves the system quality.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Facilitates team scale and efficiency."))),Object(a.b)("p",null,"Now you know what we are talking about. Disposable infrastructure is\nnothing but ",Object(a.b)("inlineCode",{parentName:"p"},"Infrastructure as Code"),"."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"Infrastructure as Code"))),Object(a.b)("p",null,"Here, you develop the code for automation exactly as same as the you do\nfor the rest of the application using agile methodologies."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Automation code is driven by a story.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Versioned in the same repository as rest of the code.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Continuously tested as part of CI/CD pipeline.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Test environments are created and destroyed along with test runs."))),Object(a.b)("p",null,"Thus, disposable infrastructure lays the ground work for scalability and\nelasticity."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Isolation")),Object(a.b)("p",null,"In traditional or legacy applications, the applications are monoliths.\nSo, when there is bug or error in the application, you need to fix it.\nOnce you changed the code, the entire application should be redeployed.\nAlso, there may be side effects which you can never predict. New changes\nmay break any components in the application as they are all inter\nrelated."),Object(a.b)("p",null,"In cloud-native applications, to avoid the above scenario, the system is\ndecomposed into bounded isolated components. Each service will be\ndefined as one component and they are all independent of each other. So,\nin this case, when there is a bug or error in the application, you know\nwhich component to fix and this also avoids any side effects as the\ncomponents are all unrelated pieces of code."),Object(a.b)("p",null,"Thus, cloud-native systems must be resilient to man made errors. To\nachieve this we need isolation and this avoids a problem in one\ncomponent affecting the entire system. Also, it helps you to introduce\nchanges quickly in the application with confidence."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Scalability")),Object(a.b)("p",null,"Simply deploying your application on cloud does not make it\ncloud-native. To be cloud native it should be able to take full benefits\nof the cloud. One of the key features is Scalability."),Object(a.b)("p",null,"In today’s world, once your business starts growing, the number of users\nkeep increasing and they may be from different locations. Your\napplication should be able to support more number of devices and it\nshould also be able to maintain its responsiveness. Moreover, this\nshould be efficient and cost-effective."),Object(a.b)("p",null,"To achieve this, cloud native application runs in multiple runtimes\nspread across multiple hosts. The applications should be designed and\narchitected in a way that they support multi regional, active-active\ndeployments. This helps you to increase the availability and avoids\nsingle point of failures."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Disposable architecture")),Object(a.b)("p",null,"Leveraging the disposable infrastructure and scaling isolated components\nis important for cloud native applications. Disposable architecture is\nbased on this and it takes the idea of disposability and replacement to\nthe next level."),Object(a.b)("p",null,"Most of us think in a monolithic way because we got used to traditional\nor legacy applications a lot. This may lead us to take decisions in\nmonolithic way rather than in cloud native way. In monoliths, we tend to\nbe safe and don’t do a lot of experimentation. But Disposable\narchitecture is exactly opposite to monolithic thinking. In this\napproach, we develop small pieces of the component and keep\nexperimenting with it to find an optimal solution."),Object(a.b)("p",null,"When there is a breakthrough in the application, you can’t simply take\ndecisions based on the available information which may be incomplete or\ninaccurate. So, with disposable architecture, you start with small\nincrements, and invest time to find the optimal solution. Sometimes,\nthere may be a need to completely replace the component, but that\ninitial work was just the cost of getting the information that caused\nthe breakthrough. This helps you to minimize waste allowing you to use\nyour resources on controlled experiments efficiently and get good value\nout of it in the end."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Value added cloud services")),Object(a.b)("p",null,"When you are defining an application, there are many things you need to\ncare of. Each and every service will be associated with many things like\ndatabases, storage, redundancy, monitoring, etc. For your application,\nalong with your components, you also need to scale the data. You can\nreduce the operational risk and also get all such things at greater\nvelocity by leveraging the value-added services that are available on\ncloud. Sometimes, you may need third party services if they are not\navailable on your cloud. You can externally hook them up with your\napplication as needed."),Object(a.b)("p",null,"By using the value added services provided by your cloud provider, you\nwill get to know all the available options on your cloud and you can\nalso learn about all the new services. This will help you to take good\nlong-termed decisions. You can definitely exit the service if you find\nsomething more suitable for your component and hook that up with your\napplication based on the requirements."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Polyglot cloud")),Object(a.b)("p",null,"Most of you are familiar with Polyglot programming. For your\napplication, based on the component, you can choose the programming\nlanguages that best suits it. You need not stick to a single programming\nlanguage for the entire application. If you consider Polyglot\npersistence, the idea is choose the storage mechanism that suits better\non a component by component basis. It allows a better global scale."),Object(a.b)("p",null,"Similarly, the next thing will be Polyglot cloud. Like above, here you\nchoose a cloud provider that better suits on a component by component\nbasis. For majority of your components, you may have a go to cloud\nprovider. But, this does not stop you from choosing a different one if\nit suits well for any of your application components. So, you can run\ndifferent components of your cloud native system on different cloud\nproviders based on your requirements."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Self-sufficient, full-stack teams")),Object(a.b)("p",null,"In a traditional set up, many organizations have teams based on skill\nset like backend, user interface, database, operations etc. Such a\nstructure will not allow you to build cloud native systems."),Object(a.b)("p",null,"In cloud native systems, the system is composed of bounded isolated\ncomponents. They have their own resources. Each of such component must\nbe owned by self-sufficient, full stack team. That team is entirely\nresponsible for all the resources that belong to that particular\ncomponent. In this set up, team tends to build quality up front in as\nthey are the ones who deploy it and they will be taking care of it if\nthe component is broken. It is more like you build it and then you run\nit. So, the team can continuously deliver advancements to the components\nat their own pace. Also, they are completely responsible for delivering\nit safely."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Cultural Change")),Object(a.b)("p",null,"Cloud native is different way of thinking. We need to first make up our\nminds, not just the systems, to utilize the full benefits of cloud.\nCompared to the traditional systems, there will be lots of things we do\ndifferently in cloud-native systems."),Object(a.b)("p",null,"To make that happen, cultural change is really important. To change the\nthinking at high level, we just to first prove that the low level\npractices can truly deliver and encourage lean thinking. With this\npractice, you can conduct experimentation. Based on the feedback from\nbusiness, you can quickly and safely deliver your applications that can\nscale."),Object(a.b)("h2",null,"Cloud-native Roadmap"),Object(a.b)("p",null,"You can define your cloud native road map in many ways. You can get\nthere by choosing different paths. Let us see the trail map defined by\nCNCF."),Object(a.b)("p",null,"CNCF defined the Cloud Native Trail Map providing an overview for\nenterprises starting their cloud native journey as follows."),Object(a.b)("p",null,"This cloud map gives us various steps that an engineering team may use\nwhile considering the cloud native technologies and exploring them. The\nmost common ones among them are Containerization, CI/CD, and\nOrchestration. Next crucial pieces will be Observability & Analysis and\nService Mesh. And later comes the rest of them like Networking,\nDistributed Database, Messaging, Container runtime, and software\ndistribution based on your requirements."),Object(a.b)("img",{src:"../../assets/images/CNCF_TrailMap_latest.png",alt:"CNCF_TrailMap_latest.png"}),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"With out Containerization, you cannot build cloud native\napplications. This helps your application to run in any computing\nenvironment. Basically, all your code and dependencies are packaged\nup together in to a single unit here. Among different container\nplatforms available, Docker is a preferred one.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"To bring all the changes in the code to container automatically, it\nis nice to set up a CI/CD pipeline which does that. There are many\ntools available like jenkins, travis, etc.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Since we have containers, we need container orchestration to manage\nthe container lifecycles. Currently, Kubernetes is one solution\nwhich is popular.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Monitoring and Observability plays a very important role. It is good\nto set up some of them like logging, tracing, metrics etc.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"To enable more complex operational requirements, you can use a\nservice mesh. It helps you out with several things like service\ndiscovery, health, routing, A/B testing etc. Istio is one of the\nexamples of service mesh.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Networking plays a crucial role. You should define flexible\nnetworking layers based on your requirements. For this, you can use\nCalico, Weave Net etc.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Sometimes, you may need distributed databases. Based on your\nrequirements, if you need more scalability and resiliency, these are\nrequired.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Messaging may be required sometimes too. Go with different messaging\nqueues like Kafka, RabbitMQ etc available when you need them.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Container Registry helps you to store all your containers. You can\nalso enable image scanning and signing if required.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"As a part of your application, sometimes you may need a secure\nsoftware distribution."))),Object(a.b)("p",null,"Also, if you want to see the cloud native landscape, check it out\n",Object(a.b)("a",o({parentName:"p"},{href:"https://landscape.cncf.io/images/landscape.png"}),"here"),"."),Object(a.b)("h2",null,"Summary"),Object(a.b)("p",null,"In this, we covered the fundamentals of cloud native systems. You now\nknow what cloud native is, why we need it and how it is important. Cloud\nnative is not just deploying your application on cloud but it is more of\ntaking full advantages of cloud. Also, from cloud-native roadmap, you\nwill get an idea on how to design and architect your cloud-native\nsystem. You can also get the idea of different tools, frameworks,\nplatforms etc from the cloud-native landscapes."),Object(a.b)("p",null,"Also, if you are interesting in knowing more, we have ",Object(a.b)("a",o({parentName:"p"},{href:"https://www.ibm.com/cloud/learn/cloud-native"}),"Cloud-Native: A\nComplete Guide"),". Feel free\nto check this out."),Object(a.b)("h2",null,"References"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",o({parentName:"p"},{href:"https://www.ibm.com/cloud/learn/cloud-native"}),"Learn Cloud-native"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",o({parentName:"p"},{href:"https://learning.oreilly.com/library/view/cloud-native-development/9781788473927/"}),"John Gilbert, (2018). Cloud Native Development Patterns and Best\nPractices. Publisher: Packt\nPublishing"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",o({parentName:"p"},{href:"https://github.com/cncf/landscape"}),"CNCF landscape"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",o({parentName:"p"},{href:"https://github.com/cncf/toc/blob/master/DEFINITION.md"}),"CNCF\nDefinition")))))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-concepts-cloud-native-overview-index-mdx-3fe639729344e2801bb3.js.map